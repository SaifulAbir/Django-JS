diff --git a/job/migrations/0049_merge_20200419_1127.py b/job/migrations/0049_merge_20200419_1127.py
new file mode 100644
index 0000000..68f8ca9
--- /dev/null
+++ b/job/migrations/0049_merge_20200419_1127.py
@@ -0,0 +1,16 @@
+# Generated by Django 3.0.3 on 2020-04-19 05:27
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0046_auto_20200418_1623'),
+        ('job', '0048_auto_20200419_1106'),
+        ('job', '0048_merge_20200415_2120'),
+        ('job', '0046_auto_20200418_1744'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0050_auto_20200419_1815.py b/job/migrations/0050_auto_20200419_1815.py
new file mode 100644
index 0000000..11a21d2
--- /dev/null
+++ b/job/migrations/0050_auto_20200419_1815.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:15
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0049_merge_20200419_1127'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 12, 15, 43, 486874, tzinfo=utc)),
+        ),
+    ]
diff --git a/pro/admin.py b/pro/admin.py
index b92e362..6e55325 100644
--- a/pro/admin.py
+++ b/pro/admin.py
@@ -1,6 +1,12 @@
 from django.contrib import admin
 
 # Register your models here.
-from pro.models import Professional
+from pro.models import *
 
 admin.site.register(Professional)
+admin.site.register(Institute)
+admin.site.register(Nationality)
+admin.site.register(Religion)
+admin.site.register(Major)
+admin.site.register(Organization)
+admin.site.register(CertificateName)
diff --git a/pro/api.py b/pro/api.py
index b6d2675..b121260 100644
--- a/pro/api.py
+++ b/pro/api.py
@@ -31,9 +31,10 @@ from rest_framework.views import APIView
 from rest_framework_simplejwt.authentication import AUTH_HEADER_TYPES
 from rest_framework_simplejwt.exceptions import TokenError, InvalidToken
 
+from job.serializers import SkillSerializer
 from p7.permissions import IsAppAuthenticated
 from p7.settings_dev import SITE_URL
-from pro.models import Professional
+from pro.models import Professional, Religion, Nationality
 from pro.models import Professional, ProfessionalEducation, ProfessionalSkill, WorkExperience, Portfolio, Membership, \
     Certification, Reference
 from django.core.mail import EmailMultiAlternatives
@@ -43,7 +44,7 @@ from django.urls import reverse
 
 from django_rest_passwordreset.signals import reset_password_token_created
 
-from pro.serializers import CustomTokenSerializer, TokenObtainCustomPairSerializer, ProfessionalEducationSerializer
+from pro.serializers import *
 from pro.serializers import ProfessionalSerializer
 from resources.strings_pro import *
 from rest_framework.status import (
@@ -211,20 +212,22 @@ class ProfessionalDetail(APIView):
         reference = Reference.objects.filter(professional=pk, is_archived=False)
 
         info_data = ProfessionalSerializer(profile).data
+        info_data['religion_obj'] = ReligionSerializer(profile.religion).data
+        info_data['nationality_obj'] = NationalitySerializer(profile.nationality).data
         edu_data = [{
             'education_id': edu.id,
             'qualification': edu.qualification_id,
-            'institution': edu.institution_id,
+            'institution_obj': InstituteNameSerializer(edu.institution).data,
             'cgpa': edu.cgpa,
-            'major': edu.major_id,
+            'major':MajorSerializer(edu.major).data,
             'enrolled_date': edu.enrolled_date,
             'graduation_date': edu.graduation_date,
         } for edu in education
         ]
 
         skill_data = [{
-            'prof_skill_id':skill.id,
-            'skill': str(skill.name),
+            'id':skill.id,
+            'skill_obj': SkillSerializer(skill.name).data,
             'rating': skill.rating,
             'verified_by_skillcheck': skill.verified_by_skillcheck,
         } for skill in skills
@@ -248,7 +251,7 @@ class ProfessionalDetail(APIView):
 
         membership_data = [{
             'membership_id':ms.id,
-            'org_name': ms.org_name_id,
+            'organization_obj':OrganizationNameSerializer(ms.org_name).data,
             'position_held': ms.position_held,
             'membership_ongoing': ms.membership_ongoing,
             'Start_date': ms.Start_date,
@@ -259,8 +262,8 @@ class ProfessionalDetail(APIView):
 
         certification_data = [{
             'certification_id': cert.id,
-            'certification_name': cert.certification_name_id,
-            'organization_name': cert.organization_name_id,
+            'certificate_name': CertificateNameSerializer(cert.certification_name).data,
+            'organization': OrganizationNameSerializer(cert.organization_name).data,
             'has_expiry_period': cert.has_expiry_period,
             'issue_date': cert.issue_date,
             'expiry_date': cert.expiry_date,
@@ -270,7 +273,7 @@ class ProfessionalDetail(APIView):
         ]
 
         reference_data = [{
-            'reference_id':ref.id,
+            'id':ref.id,
             'name': ref.name,
             'current_position': ref.current_position,
             'email': ref.email,
@@ -301,27 +304,58 @@ class ProfessionalDetail(APIView):
 #
 #     return Response(HTTP_200_OK)
 
-class ProfessionalEducationSave(generics.ListCreateAPIView):
-    queryset = ProfessionalEducation.objects.all()
-    serializer_class = ProfessionalEducationSerializer
+
+class ReligionList(generics.ListCreateAPIView):
+    queryset = Religion.objects.all()
+    serializer_class = ReligionSerializer
+
+class NationalityList(generics.ListCreateAPIView):
+    queryset = Nationality.objects.all()
+    serializer_class = NationalitySerializer
+
+class InstituteList(generics.ListCreateAPIView):
+    queryset = Institute.objects.all()
+    serializer_class = InstituteNameSerializer
+
+class OrganizationList(generics.ListCreateAPIView):
+    queryset = Organization.objects.all()
+    serializer_class = OrganizationNameSerializer
+
+class MajorList(generics.ListCreateAPIView):
+    queryset = Major.objects.all()
+    serializer_class = MajorSerializer
+
+class CertificateNameList(generics.ListCreateAPIView):
+    queryset = CertificateName.objects.all()
+    serializer_class = CertificateNameSerializer
+
 
 @api_view(["POST"])
-def professional_skill_save(request):
+def professional_education_save(request):
     data = json.loads(request.body)
+    key_obj = ProfessionalEducation(**data)
+    key_obj.save()
+    data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=data['institution_id'])).data
+    data['major_obj'] = MajorSerializer(Major.objects.get(pk=data['major_id'])).data
+    data['education_id'] = key_obj.id
+    return Response(data)
 
+@api_view(["POST"])
+def professional_skill_save(request):
+    data = json.loads(request.body)
     key_obj = ProfessionalSkill(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['skill_obj']= SkillSerializer(Skill.objects.get(pk=data['name_id'])).data
+    data['prof_skill_id'] = key_obj.id
+    return Response(data)
 
 @api_view(["POST"])
 def professional_workexperience_save(request):
     data = json.loads(request.body)
-
     key_obj = WorkExperience(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_portfolio_save(request):
@@ -330,16 +364,17 @@ def professional_portfolio_save(request):
     key_obj = Portfolio(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_membership_save(request):
     data = json.loads(request.body)
-
     key_obj = Membership(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['organizaion_obj'] = OrganizationNameSerializer(
+        Organization.objects.get(pk=data['organization_id'])).data
+    data['membership_id'] = key_obj.id
+    return Response(data)
 
 @api_view(["POST"])
 def professional_certification_save(request):
@@ -348,7 +383,7 @@ def professional_certification_save(request):
     key_obj = Certification(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_reference_save(request):
@@ -356,8 +391,8 @@ def professional_reference_save(request):
 
     key_obj = Reference(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['reference_id'] = key_obj.id
+    return Response(data)
 
 
 
@@ -370,18 +405,18 @@ class ProfessionalUpdateView(APIView):
             raise Http404
     def put(self, request, pk, format=None):
         profile = self.get_object(pk)
-
         # image uploading code start here
-        img_base64 = request.data['image']
-        if img_base64:
-            format, imgstr = img_base64.split(';base64,')
-            ext = format.split('/')[-1]
-            filename = str(uuid.uuid4()) + '-professional.' + ext
-            data = ContentFile(base64.b64decode(imgstr), name=filename)
-            fs = FileSystemStorage()
-            filename = fs.save(filename, data)
-            uploaded_file_url = fs.url(filename)
-            request.data['image'] = uploaded_file_url
+        if 'image' in request.data:
+            img_base64 = request.data['image']
+            if img_base64:
+                format, imgstr = img_base64.split(';base64,')
+                ext = format.split('/')[-1]
+                filename = str(uuid.uuid4()) + '-professional.' + ext
+                data = ContentFile(base64.b64decode(imgstr), name=filename)
+                fs = FileSystemStorage()
+                filename = fs.save(filename, data)
+                uploaded_file_url = fs.url(filename)
+                request.data['image'] = uploaded_file_url
         # end of image uploading code
 
         serializer = ProfessionalSerializer(profile, data=request.data)
@@ -654,9 +689,100 @@ class ProfessionalUpdatePartial(GenericAPIView, UpdateModelMixin):
     queryset = Professional.objects.all()
     serializer_class = ProfessionalSerializer
 
+    def put(self,request,pk, *args, **kwargs,):
+        if 'image' in request.data:
+            img_base64 = request.data['image']
+            if img_base64:
+
+                format, imgstr = img_base64.split(';base64,')
+                ext = format.split('/')[-1]
+                filename = str(uuid.uuid4()) + '-professional.' + ext
+                data = ContentFile(base64.b64decode(imgstr), name=filename)
+                fs = FileSystemStorage()
+                filename = fs.save(filename, data)
+                uploaded_file_url = fs.url(filename)
+                request.data['image'] = uploaded_file_url
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ProfessionalSerializer(Professional.objects.get(pk=pk)).data
+        prof_obj['religion_obj'] = ReligionSerializer(Religion.objects.get(pk = prof_obj['religion'])).data
+        prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk = prof_obj['nationality'])).data
+        # if 'religion_obj' in request.data:
+        #     prof_obj['religion_obj'] = ReligionSerializer(
+        #         Religion.objects.get(pk=request.data['religion'])).data
+        # if 'nationality_obj' in request.data:
+        #     prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk=request.data['nationality'])).data
+        return Response(prof_obj)
+
+class ReferenceUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Reference.objects.all()
+    serializer_class = ReferenceSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ReferenceSerializer(Reference.objects.get(pk=pk)).data
+        return Response(prof_obj)
+
+class EducationUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = ProfessionalEducation.objects.all()
+    serializer_class = ProfessionalEducationSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        request.data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=request.data['institution_id'])).data
+        request.data['major_obj'] = MajorSerializer(Major.objects.get(pk=request.data['major.id'])).data
+        prof_obj = ProfessionalEducation.objects.get(pk=pk)
+        request.data['education_id'] = prof_obj.id
+        return Response(request.data)
+
+class SkillUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = ProfessionalSkill.objects.all()
+    serializer_class = ProfessionalSkillSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ProfessionalSkillSerializer(ProfessionalSkill.objects.get(pk=pk)).data
+        print(prof_obj)
+        if 'name_id' in request.data:
+            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=request.data['name_id'])).data
+        else:
+            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=prof_obj['name'])).data
+        return Response(prof_obj)
+
+class WorkExperienceUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = WorkExperience.objects.all()
+    serializer_class = WorkExperienceSerializer
+
+    def put(self, request, *args, **kwargs):
+        return self.partial_update(request, *args, **kwargs)
+
+class PortfolioUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Portfolio.objects.all()
+    serializer_class = PortfolioSerializer
+
+    def put(self, request, *args, **kwargs):
+        return self.partial_update(request, *args, **kwargs)
+
+class MembershipUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Membership.objects.all()
+    serializer_class = MembershipSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        if 'organization_id' in request.data:
+            request.data['organizaion_obj'] = OrganizationNameSerializer(
+                Organization.objects.get(pk=request.data['organization_id'])).data
+            prof_obj = Membership.objects.get(pk=pk)
+            request.data['membership_id'] = prof_obj.id
+        return Response(request.data)
+
+class CertificationUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Certification.objects.all()
+    serializer_class = CertificationSerializer
+
     def put(self, request, *args, **kwargs):
         return self.partial_update(request, *args, **kwargs)
 
+
 # @api_view(["GET"])
 # def professional_info(request,pk):
 #     basic_info = Professional.objects.get(pk=pk)
diff --git a/pro/migrations/0029_professional_current_location.py b/pro/migrations/0029_professional_current_location.py
new file mode 100644
index 0000000..af487be
--- /dev/null
+++ b/pro/migrations/0029_professional_current_location.py
@@ -0,0 +1,18 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:15
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('pro', '0028_workexperience_currently_working_here'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='professional',
+            name='current_location',
+            field=models.CharField(blank=True, max_length=255, null=True),
+        ),
+    ]
diff --git a/pro/models.py b/pro/models.py
index afa1f7a..b7e028e 100644
--- a/pro/models.py
+++ b/pro/models.py
@@ -87,6 +87,9 @@ class Professional(models.Model):
     nationality = models.ForeignKey(Nationality,on_delete=models.PROTECT, null=True, blank=True)
     religion = models.ForeignKey(Religion,on_delete=models.PROTECT, null=True, blank=True)
     permanent_address = models.CharField(max_length=255, null=True, blank=True)
+    current_location = models.CharField(max_length=255, null=True, blank=True)
+
+
 
 
 
@@ -107,10 +110,12 @@ class Professional(models.Model):
 
 class ProfessionalEducation(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
-    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT)
+    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT) # name = degree
     institution = models.ForeignKey(Institute, on_delete=models.PROTECT, null=True, blank=True)
+    # new_institution = models.CharField(max_length=255,blank=True, null=True)
     cgpa = models.CharField(max_length=255, blank=True, null=True)
     major = models.ForeignKey(Major, on_delete=models.PROTECT, null=True, blank=True)
+    # new_major = models.CharField(max_length=255,blank=True, null=True)
     enrolled_date = models.DateField(null=True, blank=True)
     graduation_date = models.DateField(null=True, blank=True)
     created_date = models.DateTimeField(default=timezone.now)
@@ -136,7 +141,8 @@ class ProfessionalSkill(models.Model):
 
 class WorkExperience(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
-    company = models.ForeignKey(Company, on_delete=models.PROTECT)
+    company = models.ForeignKey(Company, on_delete=models.PROTECT )
+    # new_company = models.CharField(max_length=255)
     designation = models.CharField(max_length=255, blank=True, null=True)
     Started_date = models.DateField(null=True, blank=True)
     end_date = models.DateField(null=True, blank=True)
@@ -164,6 +170,7 @@ class Portfolio(models.Model):
 class Membership(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
     org_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
+    # new_organization = models.CharField(max_length=255,blank=True, null=True)
     position_held = models.CharField(max_length=255, blank=True, null=True)
     membership_ongoing = models.BooleanField(default=False)
     Start_date = models.DateField(null=True, blank=True)
@@ -188,7 +195,9 @@ class CertificateName(models.Model):
 class Certification(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
     certification_name = models.ForeignKey(CertificateName,on_delete=models.PROTECT)
+    # new_certificate_name = models.CharField(max_length=255)
     organization_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
+    # new_organization = models.CharField(max_length=255,blank=True, null=True)
     has_expiry_period = models.BooleanField(default=True)
     issue_date = models.DateField(null=True, blank=True)
     expiry_date = models.DateField(null=True, blank=True)
diff --git a/pro/serializers.py b/pro/serializers.py
index 85ea206..53a0477 100644
--- a/pro/serializers.py
+++ b/pro/serializers.py
@@ -4,7 +4,7 @@ from rest_framework_simplejwt.state import User
 from django.contrib.auth import authenticate
 from rest_framework_simplejwt.tokens import RefreshToken
 
-from pro.models import Professional, ProfessionalEducation
+from pro.models import *
 from rest_framework import exceptions
 from django.utils.translation import ugettext_lazy as _
 from resources.strings_pro import *
@@ -20,6 +20,69 @@ class ProfessionalEducationSerializer(serializers.ModelSerializer):
         model = ProfessionalEducation
         fields = '__all__'
 
+class ReferenceSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Reference
+        fields = '__all__'
+
+class ProfessionalSkillSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = ProfessionalSkill
+        fields = '__all__'
+
+class WorkExperienceSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = WorkExperience
+        fields = '__all__'
+
+class PortfolioSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Portfolio
+        fields = '__all__'
+
+class MembershipSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Membership
+        fields = '__all__'
+
+class CertificationSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Certification
+        fields = '__all__'
+
+
+class ReligionSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Religion
+        fields = '__all__'
+
+class NationalitySerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Nationality
+        fields = '__all__'
+
+class CertificateNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = CertificateName
+        fields = '__all__'
+
+class MajorSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Major
+        fields = '__all__'
+
+class OrganizationNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Organization
+        fields = '__all__'
+
+class InstituteNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Institute
+        fields = '__all__'
+
+
+
 class CustomTokenSerializer(serializers.Serializer):
     token = serializers.CharField()
 
diff --git a/pro/urls.py b/pro/urls.py
index aa517e7..bd6e0e0 100644
--- a/pro/urls.py
+++ b/pro/urls.py
@@ -25,12 +25,24 @@ urlpatterns = [
     path('job_alert/', job_alert),
     path('job_alert_notification/', job_alert_notification),
     path('profile_update_partial/<str:pk>/', ProfessionalUpdatePartial.as_view()),
-    path('professional_education_save/', ProfessionalEducationSave.as_view()),
-    path('professional_skill_save/', professional_skill_save),
-    path('professional_work_experience_save/', professional_workexperience_save),
-    path('professional_portfolio_save/', professional_portfolio_save),
-    path('professional_membership_save/', professional_membership_save),
-    path('professional_certification_save/', professional_certification_save),
-    path('professional_reference_save/', professional_reference_save),
-    # path('professional_info/<str:pk>/', professional_info),
+    path('professional_education/', professional_education_save),
+    path('professional_education/<str:pk>/', EducationUpdateDelete.as_view()),
+    path('professional_skill/', professional_skill_save),
+    path('professional_skill/<str:pk>/', SkillUpdateDelete.as_view()),
+    path('professional_work_experience/', professional_workexperience_save),
+    path('professional_work_experience/<str:pk>/', WorkExperienceUpdateDelete.as_view()),
+    path('professional_portfolio/', professional_portfolio_save),
+    path('professional_portfolio/<str:pk>/', PortfolioUpdateDelete.as_view()),
+    path('professional_membership/', professional_membership_save),
+    path('professional_membership/<str:pk>/', MembershipUpdateDelete.as_view()),
+    path('professional_certification/', professional_certification_save),
+    path('professional_certification/<str:pk>/', CertificationUpdateDelete.as_view()),
+    path('professional_reference/', professional_reference_save),
+    path('professional_reference/<str:pk>/', ReferenceUpdateDelete.as_view()),
+    path('religion/', ReligionList.as_view()),
+    path('nationality/', NationalityList.as_view()),
+    path('organization/', OrganizationList.as_view()),
+    path('major/', InstituteList.as_view()),
+    path('institute/', InstituteList.as_view()),
+    path('certificate_name/', CertificateNameList.as_view()),
 ]
\ No newline at end of file
