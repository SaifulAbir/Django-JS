diff --git a/bdjobs_detail_list.csv b/bdjobs_detail_list.csv
new file mode 100644
index 0000000..66c004f
--- /dev/null
+++ b/bdjobs_detail_list.csv
@@ -0,0 +1,2 @@
+Published Date,Job Title,Company Name,Education,Experience,Deadline,Vacancy,Job Responsibilities,Employment Status,Educational Requirment,Job Requirment,Job Location,Salary,Other Benefit,Job Link
+,,,,,,,,,,,,,,
diff --git a/job/admin.py b/job/admin.py
index ab93b64..dd04407 100644
--- a/job/admin.py
+++ b/job/admin.py
@@ -2,7 +2,8 @@ from django.conf import settings
 from django.contrib import admin
 
 # Register your models here.
-from job.models import Company, JobType, Experience, Qualification, Gender, Industry, Job, Currency, TrendingKeywords
+from job.models import Company, JobType, Experience, Qualification, Gender, Industry, Job, Currency, TrendingKeywords, \
+    ApplyOnline
 from job.models import Company, JobType, Experience, Qualification, Gender, Industry, Job, Currency , Skill
 from django_admin_listfilter_dropdown.filters import DropdownFilter
 from rangefilter.filter import DateRangeFilter, DateTimeRangeFilter
@@ -16,7 +17,7 @@ class JobAdmin(admin.ModelAdmin):
     date_hierarchy = 'entry_date'
     list_per_page = 15
     list_filter = (('entry_date', DateTimeRangeFilter),)
-
+    readonly_fields = ["slug",]
 # class CompanyAdmin(admin.ModelAdmin):
 #     list_display = ['name', 'address', 'basis_membership_no', 'email', 'web_address', 'organization_head','year_of_eastablishment',
 #                     'division', 'district']
@@ -51,9 +52,18 @@ class CompanyAdmin(admin.ModelAdmin):
 class TrendingKeywordsAdmin(admin.ModelAdmin):
     list_display = ['keyword', 'location', 'device', 'browser', 'operating_system', 'created_date']
     search_fields = ['keyword', 'location', 'device', 'browser', 'operating_system', 'created_date']
+# admin.site.register(Company, CompanyAdmin)
 
 
-# admin.site.register(Company, CompanyAdmin)
+
+# admin.site.register(ApplyOnline, ApplyOnlineAdmin)
+class ApplyOnlineAdmin(admin.ModelAdmin):
+    list_display = ['job', 'created_by', 'created_at', 'created_from', 'modified_by', 'modified_at', 'modified_from']
+    search_fields = ['job', 'created_by', 'created_at', 'created_from', 'modified_by', 'modified_at', 'modified_from']
+
+
+# admin.site.register(ApplyOnline, ApplyOnlineAdmin)
+
 admin.site.register(JobType)
 admin.site.register(Experience)
 admin.site.register(Qualification)
@@ -63,3 +73,4 @@ admin.site.register(Currency)
 admin.site.register(Job, JobAdmin)
 admin.site.register(Skill)
 admin.site.register(TrendingKeywords, TrendingKeywordsAdmin)
+admin.site.register(ApplyOnline,ApplyOnlineAdmin)
diff --git a/job/api.py b/job/api.py
index 471ed96..98631aa 100644
--- a/job/api.py
+++ b/job/api.py
@@ -1,3 +1,4 @@
+from django.contrib.auth.models import User
 from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
 from django.db import models
 from django.db.models import Count, QuerySet, Value, CharField
@@ -24,7 +25,7 @@ from rest_framework.pagination import PageNumberPagination
 from pro.models import Professional
 from resources.strings_job import *
 from .models import Company, Job, Industry, JobType, Experience, Qualification, Gender, Currency, TrendingKeywords, \
-    Skill, FavouriteJob
+    Skill, FavouriteJob, ApplyOnline
 
 from .models import Company, Job, Industry, JobType, Experience, Qualification, Gender, Currency, TrendingKeywords, \
     Skill
@@ -32,6 +33,8 @@ from .serializers import *
 from rest_framework.response import Response
 from rest_framework import generics, pagination
 from pro.utils import similar
+from .utils import favourite_job_counter, applied_job_counter
+
 
 class CompanyList(generics.ListCreateAPIView):
     queryset = Company.objects.all()
@@ -53,20 +56,30 @@ class JobObject(APIView):
         job = get_object_or_404(Job, slug=slug)
         try:
             if request.user.is_authenticated:
-                print(request.user)
                 favourite_job = FavouriteJob.objects.get(job=job, user=request.user)
             else:
                 favourite_job = FavouriteJob.objects.get(job=job)
         except FavouriteJob.DoesNotExist:
             favourite_job = None
+        try:
+            if request.user.is_authenticated:
+                applied_job = ApplyOnline.objects.get(job=job, created_by=request.user)
+            else:
+                applied_job = ApplyOnline.objects.get(job=job)
+        except ApplyOnline.DoesNotExist:
+            applied_job = None
         if favourite_job is not None:
             job.status = YES_TXT
         else:
             job.status = NO_TXT
+        if applied_job is not None:
+            job.is_applied = YES_TXT
+        else:
+            job.is_applied = NO_TXT
         data = JobSerializer(job).data
         data['skill']=[]
         if data['company_location'] is None:
-            data['company_location'] = 'Unknown'
+            data['company_location'] = ''
         if data['company_name'] is not None:
             ob = Company.objects.get(name=data['company_name'])
             if ob.profile_picture:
@@ -103,7 +116,6 @@ class JobObject(APIView):
             data['skill'].append(skill.name)
         #     else:
         #         data['skill'] = data['skill'] + (skill.skill.name + ', ')
-        print(data)
         return Response(data)
 
 class IndustryList(generics.ListCreateAPIView):
@@ -130,15 +142,17 @@ def job_list(request):
         experienceMin = request.GET.get('experienceMin')
         experienceMax = request.GET.get('experienceMax')
         datePosted = request.GET.get('datePosted')
-        print(datePosted)
         gender = request.GET.get('gender')
         qualification = request.GET.get('qualification')
         if sorting == 'descending':
             job_list = Job.objects.all().annotate(status=Value('', output_field=CharField())).order_by('-created_date')
         elif sorting == 'top-rated':
-            job_list = Job.objects.all().annotate(status=Value('', output_field=CharField())).order_by('-created_date')
+            # fav_jobs = FavouriteJob.objects.all()
+            # job_list = Job.objects.filter(fav_jobs__in = fav_jobs).annotate(favourite_count=Count('fav_jobs')
+            #                               ).order_by('-favourite_count')
+            job_list = Job.objects.all().order_by('-favorite_count')
         else:
-            job_list = Job.objects.all().annotate(status=Value('', output_field=CharField()))
+            job_list = Job.objects.all().order_by('-applied_count')
         jobtype = JobType(name=NO_NAME)
         company = Company(name=NO_NAME)
         for i in job_list:
@@ -226,14 +240,31 @@ def job_list(request):
         if request.user != "AnonymousUser":
             for job in job_list:
                 try:
-                    favourite_job = FavouriteJob.objects.get(job=job)
+                    if request.user.is_authenticated:
+                        favourite_job = FavouriteJob.objects.get(job=job, user=request.user)
+                    else:
+                        favourite_job = FavouriteJob.objects.get(job=job)
                 except FavouriteJob.DoesNotExist:
                     favourite_job = None
+
+                try:
+                    if request.user.is_authenticated:
+                        applied_job = ApplyOnline.objects.get(job=job, created_by=request.user)
+                    else:
+                        applied_job = ApplyOnline.objects.get(job=job)
+                except ApplyOnline.DoesNotExist:
+                    applied_job = None
+
                 if favourite_job is not None:
                     job.status = YES_TXT
                 else:
                     job.status = NO_TXT
 
+                if applied_job is not None:
+                    job.is_applied = YES_TXT
+                else:
+                    job.is_applied = NO_TXT
+
 
 
         number_of_row_total = paginator.count
@@ -254,8 +285,6 @@ def job_list(request):
         "results":  job_list.data,
     }
 
-    print(data)
-
 
     return Response(data, HTTP_200_OK)
 
@@ -324,7 +353,12 @@ def job_create(request):
 def favourite_job_add(request):
     data = {}
     job_data = json.loads(request.body)
+
     if job_data:
+        try:
+            job = Job.objects.get(job_id = job_data['job_id'])
+        except Job.DoesNotExist:
+            job = None
         try:
             favourite_jobs = FavouriteJob.objects.filter(user = job_data['user_id'],job = job_data['job_id'])
         except FavouriteJob.DoesNotExist:
@@ -332,6 +366,7 @@ def favourite_job_add(request):
         if not favourite_jobs:
             favourite_job = FavouriteJob(**job_data)
             favourite_job.save()
+            favourite_job_counter(job)
             data = {
                 'code': HTTP_200_OK,
                 "result": {
@@ -343,6 +378,7 @@ def favourite_job_add(request):
             }
         elif favourite_jobs:
             favourite_jobs.delete()
+            favourite_job_counter(job)
             data = {
                 'code': HTTP_200_OK,
                 "result": {
@@ -385,7 +421,7 @@ def trending_keyword_save(request):
     os_name = request.user_agent.os.family
 
     search_data.update([('device', device_name), ('browser', browser_name), ('operating_system', os_name)])
-    print(search_data)
+
     key_obj = TrendingKeywords(**search_data)
     key_obj.save()
     return Response(HTTP_200_OK)
@@ -415,17 +451,29 @@ def recent_jobs(request):
     for job in queryset:
         try:
             if request.user.is_authenticated:
-                print(request.user)
+
                 favourite_job = FavouriteJob.objects.get(job=job, user=request.user)
             else:
                 favourite_job = FavouriteJob.objects.get(job=job)
 
         except FavouriteJob.DoesNotExist:
             favourite_job = None
+        try:
+            if request.user.is_authenticated:
+                applied_job = ApplyOnline.objects.get(job=job, created_by=request.user)
+            else:
+                applied_job = ApplyOnline.objects.get(job=job)
+        except ApplyOnline.DoesNotExist:
+            applied_job = None
         if favourite_job is not None:
             job.status = YES_TXT
         else:
             job.status = NO_TXT
+
+        if applied_job is not None:
+            job.is_applied = YES_TXT
+        else:
+            job.is_applied = NO_TXT
         try:
             company = job.company_name
         except Company.DoesNotExist:
@@ -444,7 +492,7 @@ def recent_jobs(request):
             job.profile_picture = '/static/images/job/company-logo-2.png'
         if job.job_location is None:
             job.job_location = NO_LOCATION
-        data.append({'job_id':job.job_id, 'slug':job.slug, 'title':job.title, 'job_location':job.job_location, 'created_date':job.created_date, 'status':job.status, 'profile_picture':job.profile_picture, 'employment_status':str(job.employment_status), 'company_name':str(company)})
+        data.append({'job_id':job.job_id, 'is_applied':job.is_applied, 'slug':job.slug, 'title':job.title, 'job_location':job.job_location, 'created_date':job.created_date, 'status':job.status, 'profile_picture':job.profile_picture, 'employment_status':str(job.employment_status), 'company_name':str(company)})
 
     return JsonResponse(list(data), safe=False)
 
@@ -477,16 +525,29 @@ def similar_jobs(request,identifier):
     for job in queryset:
         try:
             if request.user.is_authenticated:
-                print(request.user)
+
                 favourite_job = FavouriteJob.objects.get(job=job, user=request.user)
             else:
                 favourite_job = FavouriteJob.objects.get(job=job)
         except FavouriteJob.DoesNotExist:
             favourite_job = None
+
+        try:
+            if request.user.is_authenticated:
+                applied_job = ApplyOnline.objects.get(job=job, created_by=request.user)
+            else:
+                applied_job = ApplyOnline.objects.get(job=job)
+        except ApplyOnline.DoesNotExist:
+            applied_job = None
         if favourite_job is not None:
             job.status = 'Yes'
         else:
             job.status = 'No'
+
+        if applied_job is not None:
+            job.is_applied = YES_TXT
+        else:
+            job.is_applied = NO_TXT
         if job.company_name:
             if job.company_name.profile_picture:
                 job.profile_picture = '/media/' + str(job.company_name.profile_picture)
@@ -496,7 +557,7 @@ def similar_jobs(request,identifier):
             job.profile_picture = '/static/images/job/company-logo-2.png'
 
         if similar(title, job.title)>.80:
-            data.append({'job_id': job.job_id, 'title': job.title, 'job_location': job.job_location,
+            data.append({'job_id': job.job_id, 'is_applied':job.is_applied, 'slug':job.slug, 'title': job.title, 'job_location': job.job_location,
                          'created_date': job.created_date, 'status': job.status, 'profile_picture': job.profile_picture,
                          'employment_status': str(job.employment_status), 'company_name': str(job.company_name)})
     for i in range(len(data)):
@@ -506,7 +567,7 @@ def similar_jobs(request,identifier):
     for i in range(len(data)):
         if data[i]['job_location'] is None:
             data[i]['job_location'] = NO_LOCATION
-    print(data)
+
     return JsonResponse(list(data), safe=False)
 
 
@@ -526,3 +587,56 @@ class SkillList(generics.ListCreateAPIView):
     queryset = Skill.objects.all()
     serializer_class = SkillSerializer
 
+
+
+
+@api_view(["POST"])
+def apply_online_job_add(request):
+    data = {}
+    job_data = json.loads(request.body)
+
+
+    user = User.objects.get(id = job_data['user_id'])
+    j_id = job_data['job_id']
+
+    job = Job.objects.get(job_id=j_id)
+
+    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
+    if x_forwarded_for:
+        ip = x_forwarded_for.split(',')[0]
+    else:
+        ip = request.META.get('REMOTE_ADDR')
+
+    data.update({'job': job, 'created_by': user,
+                 'created_from': str(ip), 'modified_by': user,
+                 'modified_from': str(ip)})
+    # apply_online_job = ApplyOnline(**data)
+    # print('apply_online_job', apply_online_job)
+    # apply_online_job.save()
+    if job_data:
+        try:
+            job = Job.objects.get(job_id = job_data['job_id'])
+        except Job.DoesNotExist:
+            job = None
+        try:
+            apply_online_job = ApplyOnline.objects.filter(created_by = user, job = job)
+        except ApplyOnline.DoesNotExist:
+            apply_online_job = None
+        if not apply_online_job:
+            apply_online_job = ApplyOnline(**data)
+
+            apply_online_job.save()
+            applied_job_counter(job)
+            data = {
+                'code': HTTP_200_OK,
+                "result": {
+                    "user": {
+                        "job": job_data['job_id'],
+                        "status": 'Saved'
+                    }
+                }
+            }
+
+    return Response(data)
+
+
diff --git a/job/migrations/0041_applyonline.py b/job/migrations/0041_applyonline.py
new file mode 100644
index 0000000..c12283b
--- /dev/null
+++ b/job/migrations/0041_applyonline.py
@@ -0,0 +1,31 @@
+# Generated by Django 3.0.3 on 2020-04-13 03:55
+
+import datetime
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('job', '0040_merge_20200412_1030'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='ApplyOnline',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('created_date', models.DateField(default=datetime.date.today)),
+                ('job', models.ForeignKey(db_column='job', on_delete=django.db.models.deletion.PROTECT, to='job.Job')),
+                ('user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
+            ],
+            options={
+                'verbose_name': 'Apply Online Job',
+                'verbose_name_plural': 'Apply Online Jobs',
+                'db_table': 'apply_onlines',
+            },
+        ),
+    ]
diff --git a/job/migrations/0042_auto_20200414_0750.py b/job/migrations/0042_auto_20200414_0750.py
new file mode 100644
index 0000000..9405551
--- /dev/null
+++ b/job/migrations/0042_auto_20200414_0750.py
@@ -0,0 +1,59 @@
+# Generated by Django 3.0.3 on 2020-04-14 07:50
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+import django.utils.timezone
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('job', '0041_applyonline'),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name='applyonline',
+            name='created_date',
+        ),
+        migrations.RemoveField(
+            model_name='applyonline',
+            name='user',
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='created_at',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='created_by',
+            field=models.ForeignKey(db_column='created_by', default='', on_delete=django.db.models.deletion.PROTECT, related_name='Apply_created_by', to=settings.AUTH_USER_MODEL),
+            preserve_default=False,
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='created_from',
+            field=models.CharField(default='', max_length=255),
+            preserve_default=False,
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='modified_at',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='modified_by',
+            field=models.ForeignKey(db_column='modified_by', default='', on_delete=django.db.models.deletion.PROTECT, related_name='Apply_modified_by', to=settings.AUTH_USER_MODEL),
+            preserve_default=False,
+        ),
+        migrations.AddField(
+            model_name='applyonline',
+            name='modified_from',
+            field=models.CharField(default='', max_length=255),
+            preserve_default=False,
+        ),
+    ]
diff --git a/job/migrations/0043_auto_20200415_0241.py b/job/migrations/0043_auto_20200415_0241.py
new file mode 100644
index 0000000..116847a
--- /dev/null
+++ b/job/migrations/0043_auto_20200415_0241.py
@@ -0,0 +1,23 @@
+# Generated by Django 3.0.3 on 2020-04-15 02:41
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0042_auto_20200414_0750'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='applyonline',
+            name='created_at',
+            field=models.DateTimeField(auto_now_add=True),
+        ),
+        migrations.AlterField(
+            model_name='applyonline',
+            name='modified_at',
+            field=models.DateTimeField(auto_now=True),
+        ),
+    ]
diff --git a/job/migrations/0046_merge_20200416_1650.py b/job/migrations/0046_merge_20200416_1650.py
new file mode 100644
index 0000000..11ea02b
--- /dev/null
+++ b/job/migrations/0046_merge_20200416_1650.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-16 10:50
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0043_auto_20200415_0241'),
+        ('job', '0045_auto_20200415_1212'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0048_auto_20200419_1013.py b/job/migrations/0048_auto_20200419_1013.py
new file mode 100644
index 0000000..38f24f1
--- /dev/null
+++ b/job/migrations/0048_auto_20200419_1013.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 04:13
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0047_auto_20200418_1743'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 4, 13, 8, 800841, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0048_auto_20200419_1650.py b/job/migrations/0048_auto_20200419_1650.py
new file mode 100644
index 0000000..fb55cc6
--- /dev/null
+++ b/job/migrations/0048_auto_20200419_1650.py
@@ -0,0 +1,25 @@
+# Generated by Django 3.0.3 on 2020-04-19 10:50
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0047_auto_20200418_1743'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 10, 50, 16, 515731, tzinfo=utc)),
+        ),
+        migrations.AlterField(
+            model_name='job',
+            name='slug',
+            field=models.SlugField(blank=True, max_length=255, null=True, unique=True),
+        ),
+    ]
diff --git a/job/migrations/0048_merge_20200419_0916.py b/job/migrations/0048_merge_20200419_0916.py
new file mode 100644
index 0000000..0697f6c
--- /dev/null
+++ b/job/migrations/0048_merge_20200419_0916.py
@@ -0,0 +1,15 @@
+# Generated by Django 3.0.3 on 2020-04-19 03:16
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0046_auto_20200418_1744'),
+        ('job', '0047_auto_20200418_1743'),
+        ('job', '0046_auto_20200418_1623'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0049_merge_20200419_1127.py b/job/migrations/0049_merge_20200419_1127.py
new file mode 100644
index 0000000..68f8ca9
--- /dev/null
+++ b/job/migrations/0049_merge_20200419_1127.py
@@ -0,0 +1,16 @@
+# Generated by Django 3.0.3 on 2020-04-19 05:27
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0046_auto_20200418_1623'),
+        ('job', '0048_auto_20200419_1106'),
+        ('job', '0048_merge_20200415_2120'),
+        ('job', '0046_auto_20200418_1744'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0049_merge_20200419_1505.py b/job/migrations/0049_merge_20200419_1505.py
new file mode 100644
index 0000000..8b91f98
--- /dev/null
+++ b/job/migrations/0049_merge_20200419_1505.py
@@ -0,0 +1,16 @@
+# Generated by Django 3.0.3 on 2020-04-19 09:05
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0048_merge_20200415_2120'),
+        ('job', '0048_merge_20200419_0916'),
+        ('job', '0046_merge_20200416_1650'),
+        ('job', '0048_auto_20200419_1106'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0049_merge_20200419_1806.py b/job/migrations/0049_merge_20200419_1806.py
new file mode 100644
index 0000000..cdbf648
--- /dev/null
+++ b/job/migrations/0049_merge_20200419_1806.py
@@ -0,0 +1,17 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:06
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0046_auto_20200418_1744'),
+        ('job', '0046_auto_20200418_1623'),
+        ('job', '0048_auto_20200419_1013'),
+        ('job', '0048_auto_20200419_1106'),
+        ('job', '0048_merge_20200415_2120'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0050_auto_20200419_1701.py b/job/migrations/0050_auto_20200419_1701.py
new file mode 100644
index 0000000..55fe35d
--- /dev/null
+++ b/job/migrations/0050_auto_20200419_1701.py
@@ -0,0 +1,30 @@
+# Generated by Django 3.0.3 on 2020-04-19 11:01
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0049_merge_20200419_1505'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='job',
+            name='applied_count',
+            field=models.PositiveIntegerField(default=0),
+        ),
+        migrations.AddField(
+            model_name='job',
+            name='favorite_count',
+            field=models.PositiveIntegerField(default=0),
+        ),
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 11, 1, 32, 124950, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0050_auto_20200419_1806.py b/job/migrations/0050_auto_20200419_1806.py
new file mode 100644
index 0000000..fbb043d
--- /dev/null
+++ b/job/migrations/0050_auto_20200419_1806.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:06
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0049_merge_20200419_1806'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 12, 6, 39, 52665, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0050_auto_20200419_1815.py b/job/migrations/0050_auto_20200419_1815.py
new file mode 100644
index 0000000..11a21d2
--- /dev/null
+++ b/job/migrations/0050_auto_20200419_1815.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:15
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0049_merge_20200419_1127'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 12, 15, 43, 486874, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0051_auto_20200419_1810.py b/job/migrations/0051_auto_20200419_1810.py
new file mode 100644
index 0000000..d2e1130
--- /dev/null
+++ b/job/migrations/0051_auto_20200419_1810.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:10
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0050_auto_20200419_1806'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 12, 10, 20, 677242, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0052_merge_20200419_1935.py b/job/migrations/0052_merge_20200419_1935.py
new file mode 100644
index 0000000..52c032e
--- /dev/null
+++ b/job/migrations/0052_merge_20200419_1935.py
@@ -0,0 +1,15 @@
+# Generated by Django 3.0.3 on 2020-04-19 13:35
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0048_auto_20200419_1650'),
+        ('job', '0046_merge_20200416_1650'),
+        ('job', '0051_auto_20200419_1810'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0053_auto_20200419_1935.py b/job/migrations/0053_auto_20200419_1935.py
new file mode 100644
index 0000000..5a33662
--- /dev/null
+++ b/job/migrations/0053_auto_20200419_1935.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-19 13:35
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0052_merge_20200419_1935'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 13, 35, 38, 917236, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0054_auto_20200420_0911.py b/job/migrations/0054_auto_20200420_0911.py
new file mode 100644
index 0000000..bc2f7ad
--- /dev/null
+++ b/job/migrations/0054_auto_20200420_0911.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-20 03:11
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0053_auto_20200419_1935'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 20, 3, 11, 56, 825043, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0055_merge_20200421_1049.py b/job/migrations/0055_merge_20200421_1049.py
new file mode 100644
index 0000000..c2a8b7c
--- /dev/null
+++ b/job/migrations/0055_merge_20200421_1049.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-21 04:49
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0049_merge_20200419_1505'),
+        ('job', '0054_auto_20200420_0911'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0056_auto_20200421_1049.py b/job/migrations/0056_auto_20200421_1049.py
new file mode 100644
index 0000000..b5e55bf
--- /dev/null
+++ b/job/migrations/0056_auto_20200421_1049.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-21 04:49
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0055_merge_20200421_1049'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 21, 4, 49, 55, 610253, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0057_auto_20200421_1126.py b/job/migrations/0057_auto_20200421_1126.py
new file mode 100644
index 0000000..419b090
--- /dev/null
+++ b/job/migrations/0057_auto_20200421_1126.py
@@ -0,0 +1,25 @@
+# Generated by Django 3.0.3 on 2020-04-21 05:26
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0056_auto_20200421_1049'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 21, 5, 26, 52, 625630, tzinfo=utc)),
+        ),
+        migrations.AlterField(
+            model_name='job',
+            name='job_location',
+            field=models.CharField(blank=True, max_length=50, null=True),
+        ),
+    ]
diff --git a/job/migrations/0058_auto_20200421_1127.py b/job/migrations/0058_auto_20200421_1127.py
new file mode 100644
index 0000000..07c3b31
--- /dev/null
+++ b/job/migrations/0058_auto_20200421_1127.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-21 05:27
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0057_auto_20200421_1126'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 21, 5, 27, 22, 823906, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0059_auto_20200421_1129.py b/job/migrations/0059_auto_20200421_1129.py
new file mode 100644
index 0000000..a29ae48
--- /dev/null
+++ b/job/migrations/0059_auto_20200421_1129.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-21 05:29
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0058_auto_20200421_1127'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 21, 5, 29, 27, 697439, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0060_auto_20200421_1129.py b/job/migrations/0060_auto_20200421_1129.py
new file mode 100644
index 0000000..08dc1eb
--- /dev/null
+++ b/job/migrations/0060_auto_20200421_1129.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-21 05:29
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0059_auto_20200421_1129'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 21, 5, 29, 40, 717744, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0061_merge_20200422_0957.py b/job/migrations/0061_merge_20200422_0957.py
new file mode 100644
index 0000000..fb6f7ff
--- /dev/null
+++ b/job/migrations/0061_merge_20200422_0957.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-22 03:57
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0050_auto_20200419_1701'),
+        ('job', '0060_auto_20200421_1129'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0061_merge_20200422_1111.py b/job/migrations/0061_merge_20200422_1111.py
new file mode 100644
index 0000000..10b5188
--- /dev/null
+++ b/job/migrations/0061_merge_20200422_1111.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-22 05:11
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0060_auto_20200421_1129'),
+        ('job', '0050_auto_20200419_1701'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0061_merge_20200422_1133.py b/job/migrations/0061_merge_20200422_1133.py
new file mode 100644
index 0000000..90b61fe
--- /dev/null
+++ b/job/migrations/0061_merge_20200422_1133.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-22 05:33
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0060_auto_20200421_1129'),
+        ('job', '0050_auto_20200419_1701'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0062_auto_20200422_1111.py b/job/migrations/0062_auto_20200422_1111.py
new file mode 100644
index 0000000..4169a44
--- /dev/null
+++ b/job/migrations/0062_auto_20200422_1111.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.0.3 on 2020-04-22 05:11
+
+import datetime
+from django.db import migrations, models
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0061_merge_20200422_1111'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 22, 5, 11, 46, 420533, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0062_merge_20200422_1252.py b/job/migrations/0062_merge_20200422_1252.py
new file mode 100644
index 0000000..6316a48
--- /dev/null
+++ b/job/migrations/0062_merge_20200422_1252.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-22 06:52
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0061_merge_20200422_0957'),
+        ('job', '0061_merge_20200422_1133'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0063_merge_20200422_1302.py b/job/migrations/0063_merge_20200422_1302.py
new file mode 100644
index 0000000..cdc3af0
--- /dev/null
+++ b/job/migrations/0063_merge_20200422_1302.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-22 07:02
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0062_merge_20200422_1252'),
+        ('job', '0062_auto_20200422_1111'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/migrations/0064_auto_20200422_1305.py b/job/migrations/0064_auto_20200422_1305.py
new file mode 100644
index 0000000..f7d64de
--- /dev/null
+++ b/job/migrations/0064_auto_20200422_1305.py
@@ -0,0 +1,27 @@
+# Generated by Django 3.0.3 on 2020-04-22 07:05
+
+import datetime
+from django.db import migrations, models
+import django.db.models.deletion
+from django.utils.timezone import utc
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0063_merge_20200422_1302'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='job',
+            name='company_name',
+            field=models.ForeignKey(db_column='company', default='Unknown', on_delete=django.db.models.deletion.PROTECT, to='job.Company'),
+            preserve_default=False,
+        ),
+        migrations.AlterField(
+            model_name='job',
+            name='created_date',
+            field=models.DateTimeField(default=datetime.datetime(2020, 4, 22, 7, 3, 9, 75877, tzinfo=utc)),
+        ),
+    ]
diff --git a/job/migrations/0065_merge_20200425_1556.py b/job/migrations/0065_merge_20200425_1556.py
new file mode 100644
index 0000000..da51fca
--- /dev/null
+++ b/job/migrations/0065_merge_20200425_1556.py
@@ -0,0 +1,14 @@
+# Generated by Django 3.0.3 on 2020-04-25 09:56
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('job', '0050_auto_20200419_1815'),
+        ('job', '0064_auto_20200422_1305'),
+    ]
+
+    operations = [
+    ]
diff --git a/job/models.py b/job/models.py
index 8f7c501..11a28cc 100644
--- a/job/models.py
+++ b/job/models.py
@@ -152,10 +152,10 @@ class Currency(models.Model):
 class Job(models.Model):
     job_id = models.UUIDField(primary_key=True, default=uuid.uuid4,editable=False,db_column='id')
     title = models.CharField(max_length=255)
-    slug = models.SlugField(max_length=255, null=True, blank=True)
+    slug = models.SlugField(max_length=255,unique=True,null=True, blank=True)
     industry = models.ForeignKey(Industry, on_delete=models.PROTECT,blank=True, null= True,db_column='industry', related_name='industries')
     employment_status = models.ForeignKey(JobType, on_delete=models.PROTECT,blank=True, null= True,db_column='employment_status')
-    job_location = models.CharField(max_length=255, blank=True,null=True)
+    job_location = models.CharField(max_length=50, blank=True,null=True)
     experience =  models.ForeignKey(Experience, on_delete=models.PROTECT,blank=True, null= True,db_column='experience')
     salary_min = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null= True)
     salary_max = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null= True)
@@ -169,7 +169,7 @@ class Job(models.Model):
     education = models.TextField(blank=True, null=True)
     salary = models.CharField(max_length=255, blank=True, null=True)
     other_benefits = models.TextField(max_length=255, blank=True, null=True)
-    company_name = models.ForeignKey(Company,on_delete=models.PROTECT, blank=True, null = True, db_column='company')
+    company_name = models.ForeignKey(Company,on_delete=models.PROTECT, db_column='company')
     division = models.ForeignKey(Division,on_delete=models.PROTECT, blank=True, null = True,db_column='division')
     district = models.ForeignKey(District,on_delete=models.PROTECT, blank=True, null = True, db_column='district')
     zipcode = models.CharField(max_length=255, blank=True, null = True)
@@ -179,6 +179,8 @@ class Job(models.Model):
     longitude = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null = True)
     raw_content = models.TextField(blank=True, null=True)
     web_address = models.CharField(max_length=255, blank=True, null = True)
+    favorite_count = models.PositiveIntegerField(default=0)
+    applied_count = models.PositiveIntegerField(default=0)
     terms_and_condition = models.BooleanField(default=False)
     created_date = models.DateTimeField(default=timezone.now())
     job_skills = models.ManyToManyField('Skill', blank=True, related_name='skill_set')
@@ -262,3 +264,22 @@ class FavouriteJob(models.Model):
     def __str__(self):
         return self.job.title
 #Bookmark job Model ends here
+
+#Apply Online Model Starts here
+class ApplyOnline(models.Model):
+    job = models.ForeignKey(Job, on_delete=models.PROTECT, db_column='job')
+    created_by = models.ForeignKey(User, related_name='Apply_created_by', on_delete=models.PROTECT, db_column='created_by')
+    created_at = models.DateTimeField(auto_now_add=True)
+    created_from = models.CharField(max_length=255)
+    modified_by = models.ForeignKey(User, related_name='Apply_modified_by', on_delete=models.PROTECT, db_column='modified_by')
+    modified_at = models.DateTimeField(auto_now=True)
+    modified_from = models.CharField(max_length=255)
+
+    class Meta:
+        verbose_name = strings_job.APPLY_ONLINE_JOB_VERBOSE_NAME
+        verbose_name_plural = strings_job.APPLY_ONLINE_JOB_VERBOSE_NAME_PLURAL
+        db_table = 'apply_onlines'
+
+    def __str__(self):
+        return self.job.title
+#Apply Online Model ends here
diff --git a/job/serializers.py b/job/serializers.py
index 9ab1987..757a839 100644
--- a/job/serializers.py
+++ b/job/serializers.py
@@ -49,9 +49,10 @@ class GenderSerializer(serializers.ModelSerializer):
 
 class JobSerializer(serializers.ModelSerializer):
     status = serializers.CharField(read_only=True)
+    is_applied = serializers.CharField(read_only=True)
     class Meta:
         model = Job
-        fields = ('status','job_id','title','industry','employment_status','job_location','experience'
+        fields = ('status','is_applied', 'job_id','title','industry','employment_status','job_location','experience'
             ,'salary_min' ,'salary_max','qualification','gender' ,'currency' ,'vacancy' ,'application_deadline'
             ,'descriptions' ,'responsibilities','education','salary' ,'other_benefits','company_name','division'
             ,'district','zipcode' ,'company_location' ,'company_profile','latitude','longitude','raw_content','web_address','terms_and_condition'
diff --git a/job/templates/job-details.html b/job/templates/job-details.html
index 9160355..7ab9ba1 100644
--- a/job/templates/job-details.html
+++ b/job/templates/job-details.html
@@ -205,6 +205,7 @@
         var getUrl = '/api/load_job/'+ id + '/'
         get(getUrl, loadJob);
         favouriteJobAddRemove('jobs', '/api/favourite_job_add/');
+        applyOnlineJobAddRemove('jobs', '/api/apply_online_job_add/');
 
     });
 
@@ -214,6 +215,7 @@
         container = $('.job-detail');
         if(data){
             $('.save').attr("href", data.job_id);
+            $('.apply').attr("href", data.job_id);
             var deadline= data.application_deadline
             var created_date = data.created_date
             data.created_date = created_date.split("-").reverse().join("-")
@@ -229,6 +231,16 @@
                 $('#skills').append('<p>'+ data.skill[x] +'</p>')
             }
             console.log(data);
+            var fav = $(".save");
+            var apply = $(".apply");
+            if(data.status == 'Yes' && isLoggedIn()){
+                fav.addClass('active');
+            }
+            if(data.is_applied == 'Yes' && isLoggedIn()){
+                apply.addClass('applied');
+                apply.text('Applied');
+                apply.attr('href', 'javascript:void(0)')
+            }
             json2Div(data, container);
             identifier = data['job_id'];
             catUrl = '/api/similar_jobs/'+ identifier;
@@ -263,7 +275,7 @@
                 '</div>'+
                 '<div class="more">'+
                 '<div class="buttons">'+
-                '<a href="javascript:void(0);" class="button" data-toggle="modal">Apply Now</a>'+
+                '<a href="'+data[index].job_id+'" class="button apply" data-toggle="modal">Apply Now</a>'+
                 '<a href="'+data[index].job_id+'" class="favourite"><i data-feather="heart"></i></a>'+
                 '</div>'+
                 '<p class="deadline">'+'Deadline: '+dateMomentString+'</p>'+
@@ -272,9 +284,28 @@
                 '</div>';
             $('#job-list').append(job_html);
             var el = $("#jobs").find("[href='"+ data[index].job_id +"']");
-            if(data[index].status == 'Yes' && isLoggedIn()){
-                el.addClass('active');
-            }
+            el.each(function () {
+                if($(this).hasClass('apply')){
+
+                    // $(this).removeClass('active');
+                    // showError('Oopss!', 'Job removed.')
+                    if(data[index].is_applied == 'Yes' && isLoggedIn()){
+
+                        $(this).addClass('applied');
+                        $(this).text('Applied');
+                        $(this).attr('href', 'javascript:void(0)')
+                    }
+                }
+                if($(this).hasClass("favourite")){
+                    if(data[index].status == 'Yes' && isLoggedIn()){
+                        $(this).addClass('active');
+                    }
+                    // $(this).addClass('active');
+                    // showSuccess('Successful!', 'Job saved as a favourite.')
+
+                }
+
+            });
             feather.replace();
         }
     }
diff --git a/job/templates/job-list.html b/job/templates/job-list.html
index af2c786..8d81068 100644
--- a/job/templates/job-list.html
+++ b/job/templates/job-list.html
@@ -37,7 +37,7 @@
         <div class="row no-gutters">
             <div class="col">
                 <div class="job-listing-container">
-                    <div class="filtered-job-listing-wrapper">
+                    <div class="filtered-job-listing-wrapper" id="jobs">
                         <div class="job-view-controller-wrapper">
                             <div class="job-view-controller">
                                 <div class="controller list active">
@@ -222,7 +222,7 @@
             </div>
             <div class="more">
                 <div class="buttons">
-                    <a href="javascript:void(0)" class="button __job_id dynamic-link">Apply</a>
+                    <a href="" class="apply button __job_id dynamic-link">Apply</a>
                     <a href="" class="favourite __job_id dynamic-link"><i data-feather="heart"></i></a>
                 </div>
                 <p class="deadline">Deadline: <span class="__application_deadline"></span></p>
@@ -312,6 +312,32 @@
         }
         var list = makeListHtml(data.results, template);
         $('.job-result').html(list);
+        feather.replace();
+        $.each(data.results, function(i, item) {
+            var el = $("#jobs").find("[href='"+ data.results[i].job_id +"']");
+            el.each(function () {
+                if($(this).hasClass('apply')){
+
+                    // $(this).removeClass('active');
+                    // showError('Oopss!', 'Job removed.')
+                    if(data.results[i].is_applied == 'Yes' && isLoggedIn()){
+
+                        $(this).addClass('applied');
+                        $(this).text('Applied');
+                        $(this).attr('href', 'javascript:void(0)')
+                    }
+                }
+                if($(this).hasClass("favourite")){
+                    if(data.results[i].status == 'Yes' && isLoggedIn()){
+                        $(this).addClass('active');
+                    }
+                    // $(this).addClass('active');
+                    // showSuccess('Successful!', 'Job saved as a favourite.')
+
+                }
+
+            });
+        });
         var url = '/job_list';
         var startingIndex=1;
         makePagination(totalNumberOfData, pageSize, url, startingIndex);
@@ -320,8 +346,8 @@
 
     }
     $(document).ready(function () {
-
-
+        applyOnlineJobAddRemove('jobs', '/api/apply_online_job_add/');
+        favouriteJobAddRemove('jobs', '/api/favourite_job_add/');
         var location_from_homepage = encodeURIComponent(getUrlParameter('location'));
         var keyword_from_homepage = encodeURIComponent(getUrlParameter('keyword'));
 
@@ -345,14 +371,11 @@
         cat_url='/api/popular_categories/';
         get(cat_url,loadCat);
 
-        favouriteJobAddRemove('job-list', '/api/favourite_job_add/');
-
         skill_url = '/api/skill_list/';
         get(skill_url,loadskill);
 
         filterJobList('', '', '', '');
 
-
         $("body").delegate(".page-numbers", "click", function(){
             $('.page-numbers').removeClass('current');
             $(this).addClass('current');
diff --git a/job/tests.py b/job/tests.py
index e17c879..02b3c0c 100644
--- a/job/tests.py
+++ b/job/tests.py
@@ -2,7 +2,7 @@ from django.core.exceptions import ValidationError
 from django.db import IntegrityError
 from django.test import TestCase
 from job.models import Job, Company, JobType, Qualification, Gender, Experience, Industry, Currency, TrendingKeywords, \
-    Skill, FavouriteJob
+    Skill, FavouriteJob, ApplyOnline
 from location.models import Division, District
 from django.contrib.auth.models import User
 
@@ -281,6 +281,8 @@ class JobTest(TestCase):
         employment_status.save()
         self.employment_status = employment_status
 
+
+
     def test_when_everything_is_given_should_pass(self):
         job = Job(title='Software Engineer', industry=self.industry, employment_status=self.employment_status,
                   job_location='mirpur', experience=self.experience, salary_min=5000.00, salary_max=10000.00,
@@ -339,6 +341,14 @@ class JobTest(TestCase):
         with self.assertRaises(ValidationError):
             job.full_clean()
 
+    def test__when_slug_name_duplicate__should_raise_error(self):
+        slug = Job(slug='peace-maker-c57fe949')
+        slug1 = Job(slug='peace-maker-c57fe949')
+
+        with self.assertRaises(IntegrityError):
+            slug.save()
+            slug1.save()
+
     # def test_when_job_location_is_null_should_raise_error(self):
     #     s = Job(name='Software Engineer',experience='1', gender='Male')
     #     with self.assertRaises(ValidationError):
@@ -563,6 +573,124 @@ class FavouriteJobTest(TestCase):
         with self.assertRaises(ValidationError):
             favouritejob.full_clean()
 
+#BOOKMARK_JOB_TEST#
+
+
+
+#APPLY_ONLINE_JOB_TEST#
+
+
+class ApplyOnlineTest(TestCase):
+
+    def setUp(self) :
+        division = Division(name='Dhaka')
+        division.save()
+        self.division = division
+
+        district = District(name='Dhaka', division=self.division)
+        district.save()
+        self.district = district
+
+        industry = Industry(name='Information Technology')
+        industry.save()
+        self.industry = industry
+
+        company = Company(name='Ishraak Solutions', web_address='www.ishraak.com', division=self.division,
+                          district=self.district)
+        company.save()
+        self.company = company
+
+        gender = Gender(name='Male')
+        gender.save()
+        self.gender = gender
+
+        experience = Experience(name='Part Time')
+        experience.save()
+        self.experience = experience
+
+        qualification = Qualification(name='Graduate')
+        qualification.save()
+        self.qualification = qualification
+
+        employment_status = JobType(name='Part Time')
+        employment_status.save()
+        self.employment_status = employment_status
+
+        job = Job(title='Software Engineer', industry=self.industry, employment_status=self.employment_status,
+                  job_location='mirpur', experience=self.experience, salary_min=5000.00, salary_max=10000.00,
+                  qualification=self.qualification, gender=self.gender, application_deadline='2020-03-29',
+                  descriptions='Test job', responsibilities='Web developer', education='Computer Science',
+                  other_benefits='Apple Watch', company_name=self.company, division=self.division,
+                  district=self.district,
+                  zipcode='Dhaka-1212', company_location='House 74, Road 4', latitude=3.00, longitude=4.00,
+                  web_address="www.ishraak.com")
+        job.save()
+        self.jb = job
+
+        created_by = User(username='Admin', password='123')
+        created_by.save()
+        self.c_usr = created_by
+
+
+        modified_by = User(username='Admin2', password='1234')
+        modified_by.save()
+        self.m_usr = modified_by
+
+
+
+    def test__when_everything_required_is_given__should_pass(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='127.0.0.1', modified_by=self.m_usr, modified_from='127.0.0.1')
+        try:
+            applyonline.full_clean()
+        except:
+            self.fail()
+
+    def test__when_job_is_blank__should__raise_error(self):
+        with self.assertRaises(ValueError):
+            applyonline = ApplyOnline(job='',created_by=self.c_usr, created_from='127.0.0.1', modified_by=self.m_usr, modified_from='127.0.0.1')
+
+    def test__when_job_is_null_should__raise_error(self):
+        applyonline = ApplyOnline(created_by=self.c_usr, created_from='127.0.0.1', modified_by=self.m_usr, modified_from='127.0.0.1')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_created_by_is_blank_should__raise_error(self):
+        with self.assertRaises(ValueError):
+            applyonline = ApplyOnline(job=self.jb, created_by='', created_from='127.0.0.1', modified_by=self.m_usr, modified_from='127.0.0.1')
+
+    def test__when_created_by_is_null_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_from='127.0.0.1', modified_by=self.m_usr, modified_from='127.0.0.1')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_created_from_is_blank_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='', modified_by=self.m_usr, modified_from='127.0.0.1')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_created_from_is_null_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, modified_by=self.m_usr, modified_from='127.0.0.1')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_modified_by_is_blank_should__raise_error(self):
+        with self.assertRaises(ValueError):
+            applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='127.0.0.1', modified_by='', modified_from='127.0.0.1')
+
+    def test__when_modified_by_is_null_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='127.0.0.1', modified_from='127.0.0.1')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_modified_from_is_blank_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='127.0.0.1', modified_by=self.m_usr, modified_from='')
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
+
+    def test__when_modified_from_is_null_should__raise_error(self):
+        applyonline = ApplyOnline(job=self.jb, created_by=self.c_usr, created_from='127.0.0.1', modified_by=self.m_usr)
+        with self.assertRaises(ValidationError):
+            applyonline.full_clean()
 
 
-#BOOKMARK_JOB_TEST#
\ No newline at end of file
+#APPLY_ONLINE_JOB_TEST#
\ No newline at end of file
diff --git a/job/urls.py b/job/urls.py
index ec87a11..ced0dd2 100644
--- a/job/urls.py
+++ b/job/urls.py
@@ -33,5 +33,6 @@ urlpatterns = [
     path('top_skills/', TopSkills.as_view()),
     path('salary_range/', salary_range),
     path('skill_list/', SkillList.as_view()),
+    path('apply_online_job_add/', apply_online_job_add),
 
 ]
\ No newline at end of file
diff --git a/job/utils.py b/job/utils.py
index cc9ec16..fb0c06d 100644
--- a/job/utils.py
+++ b/job/utils.py
@@ -1,9 +1,10 @@
 import random
 import string
 from django.utils.text import slugify
+from job import models
+# Random string generator
 
 
-# Random string generator
 def random_string_generator(size=10, chars=string.ascii_lowercase + string.digits):
     return ''.join(random.choice(chars) for _ in range(size))
 
@@ -27,4 +28,26 @@ def unique_slug_generator(instance, new_slug=None):
         new_slug = "{slug}-{randstr}".format(slug=slug, randstr=random_string_generator(size=4))
         return unique_slug_generator(instance, new_slug=new_slug)
     return slug
-# Unique Slug Generator
\ No newline at end of file
+# Unique Slug Generator
+
+# Favourite Job Counter
+def favourite_job_counter(job):
+    """
+    It assumes your instance has a model with a slug field and a title character (char) field.
+    """
+    if job:
+        fav_job = models.FavouriteJob.objects.filter(job=job).count()
+        job.favorite_count = fav_job
+        job.save()
+# Favourite Job Counter
+
+# Applied Job Counter
+def applied_job_counter(job):
+    """
+    It assumes your instance has a model with a slug field and a title character (char) field.
+    """
+    if job:
+        app_job = models.ApplyOnline.objects.filter(job=job).count()
+        job.applied_count = app_job
+        job.save()
+# Applied Job Counter
\ No newline at end of file
diff --git a/p7/settings_dev.py b/p7/settings_dev.py
index d59138f..2c686df 100644
--- a/p7/settings_dev.py
+++ b/p7/settings_dev.py
@@ -192,7 +192,8 @@ EMAIL_HOST_USER = 'ishraak.office@gmail.com'
 EMAIL_HOST_PASSWORD = 'rashed016'
 EMAIL_USE_TLS = True
 SESSION_COOKIE_AGE = 6000
-SITE_URL = 'http://127.0.0.1:8080'
+SITE_URL = 'http://p7.ishraak.com'
+
 
 # GOOGLE_MAPS_API_KEY = 'AIzaSyCRDW0MU2nUZMZGryae1hb8oJEG6Cr_oLQ'
 GOOGLE_MAPS_API_KEY = 'AIzaSyBYT7cwP2Ki9fwJBmRH6t2FkjjkjsywVaE'
\ No newline at end of file
diff --git a/p7_scrapping/bdjobs_detail_list.py b/p7_scrapping/bdjobs_detail_list.py
index d021c86..e85c611 100644
--- a/p7_scrapping/bdjobs_detail_list.py
+++ b/p7_scrapping/bdjobs_detail_list.py
@@ -10,10 +10,12 @@ from bs4 import BeautifulSoup
 import csv
 import time, datetime
 
+
 now = datetime.datetime.now()
 current_date = now.strftime("%b %-1d, %Y")
-
-
+unknown_company = "Unknown"
+last_scrapping_date = '2020-04-20 00:00:00.000000'
+scrapping_status = True
 # Define a function to write into file
 # Function starts from here
 def write_csv_file(data):
@@ -46,8 +48,8 @@ def write_csv_file(data):
 # Open a csv file with 'write' mode
 job_list_file_obj = open('bdjobs_detail_list.csv', 'w', newline='')
 
-main_site = 'http://jobs.bdjobs.com/'
-
+main_site = 'http://127.0.0.1:8000/'
+bdjobs = 'http://jobs.bdjobs.com/'
 # Job search url
 url = 'http://jobs.bdjobs.com/jobsearch.asp?fcatId=8'
 
@@ -111,121 +113,159 @@ while page_no <= max_page_no:
 
     for dt in data:
         # A dictionary to pass data to function
-        data_dict = {};
+        data_dict = {}
 
         # Fetching desired content using its tag and class
+        # done
         try:
-            job_title = dt.find('div', {'class': 'job-title-text'})
+            title = dt.find('div', {'class': 'job-title-text'})
         except Exception as ex:
-            job_title = "JOB TITLE"
+            title = "JOB TITLE"
 
         try:
-            data_dict['job_link'] = main_site + job_title.find('a', {'href': True})['href']
+            data_dict['web_address'] = main_site + title.find('a', {'href': True})['href']
         except Exception as ex:
-            data_dict['job_link'] = "JOB LINK"
+            data_dict['web_address'] = "JOB LINK"
 
+        # Data save to DB
         try:
-            data_dict['job_title_text'] = job_title.text.strip()
+            data_dict['title'] = title.text.strip()
         except Exception as ex:
-            data_dict['job_title_text'] = "JOB TITLE TEXT"
+            data_dict['title'] = "JOB TITLE TEXT"
 
         try:
-            data_dict['company_name'] = dt.find('div', {'class': 'comp-name-text'}).text.strip()
+            data_dict['company_name_id'] = dt.find('div', {'class': 'comp-name-text'}).text.strip()
+
+            #check company exist or not
+            COMPANY_LIST_API = main_site+'company/'
+            JOB_LIST_API_KEY = '96d56aceeb9049debeab628ac760aa11'
+            HEADER = {'api-key': JOB_LIST_API_KEY}
+            response = requests.get(COMPANY_LIST_API, json=data_dict, headers=HEADER)
+            josnResponse = response.json()
+
+            companyName = unknown_company
+            for company in josnResponse:
+                if company['name'] == data_dict['company_name_id']:
+                    companyName = companyName['name']
+            data_dict['company_name_id'] = companyName
+
         except Exception as ex:
-            data_dict['company_name'] = "COMPANY NAME"
+            data_dict['company'] = unknown_company
+
         try:
-            data_dict['deadline'] = dt.find('div', {'class': 'dead-text-d'}).text.strip()
+            data_dict['application_deadline'] = dt.find('div', {'class': 'dead-text-d'}).text.strip()
+            datetimeobject = datetime.datetime.strptime(data_dict['application_deadline'], "%b %d, %Y")
+            data_dict['application_deadline'] = datetimeobject.strftime('%Y-%m-%d')
         except Exception as ex:
             data_dict['deadline'] = "DEADLINE"
 
+
         try:
             data_dict['education'] = dt.find('div', {'class': 'edu-text-d'}).text.strip()
         except Exception as ex:
             data_dict['education'] = "EDUCATION"
 
-        try:
-            data_dict['experience'] = dt.find('div', {'class': 'exp-text-d'}).text.strip()
-        except Exception as ex:
-            data_dict['experience'] = "EXPERIENCE"
+        # try:
+        #     data_dict['experience'] = dt.find('div', {'class': 'exp-text-d'}).text.strip()
+        # except Exception as ex:
+        #     data_dict['experience'] = "EXPERIENCE"
 
         try:
-
-            resp_detail = requests.post(data_dict['job_link'])
-
+            resp_detail = requests.post(bdjobs + title.find('a', {'href': True})['href'])
             html_detail = BeautifulSoup(resp_detail.content, 'html.parser')
-            # published_date = html_detail.find('div', class_='panel-body').h4
-            # date = published_date.text.replace(u'\xa0', u'').replace(u'\n',u'').replace(u'\r', u'')
-            # for e in date:
-            #     print(date[e].replace('  ', ''))
-
             data_detail = html_detail.find('div', {'class': 'job-preview'})
-            data_dict_detail = {};
+            try:
+                data_dict['raw_content'] = data_detail.text
+                # data_dict['raw_content'] = ""
+            except Exception as ex:
+                data_dict['raw_content'] = ""
+
 
             try:
-                data_dict['published_date'] = data_detail.find('div', {'class': 'panel-body'}).findNext('h4').text.strip().replace(u'\xa0',u'').replace(u'Published on:',u'')
+                data_dict['created_date'] = data_detail.find('div', {'class': 'panel-body'}).findNext('h4').text.strip().replace(u'\xa0',u'').replace(u'Published on:',u'')
                 published_date = data_detail.find('div', {'class': 'panel-body'}).findNext('h4').text.strip().replace(u'\xa0',u'').replace(u'Published on:',u'')
+
+                datetimeobject = datetime.datetime.strptime(data_dict['created_date'], "%b %d, %Y")
+                data_dict['created_date'] = datetimeobject.strftime('%Y-%m-%d') + " 00:00:00.000000"
             except Exception as ex:
-                data_dict['published_date'] = "Error"
+                data_dict['created_date'] = "Error"
+
 
             try:
-                data_dict['no_of_vacancy'] = data_detail.find(text="Vacancy").findNext('p').text.strip()
+                data_dict['vacancy'] = data_detail.find(text="Vacancy").findNext('p').text.strip()
+
+                if data_dict['vacancy'] == 'Not specific':
+                    data_dict['vacancy'] = 0
             except Exception as ex:
                 data_dict['no_of_vacancy'] = "Error"
-            try:
-                # data_dict['employment_status'] = data_detail.find(text="Employment Status").findNext('p').text.strip()
-                data_dict['employment_status'] = data_detail.find('div', {'class': 'job_nat'}).findNext('p').text.strip()
-            except Exception as ex:
-                data_dict['employment_status'] = "Error"
+
+            # try:
+            #     data_dict['employment_status'] = data_detail.find('div', {'class': 'job_nat'}).findNext('p').text.strip()
+            # except Exception as ex:
+            #     data_dict['employment_status'] = "Error"
 
             try:
                 data_dict['job_location'] = data_detail.find(text="Job Location").findNext('p').text.strip()
             except Exception as ex:
                 data_dict['job_location'] = "Error"
 
-            try:
-                data_dict['salary'] = data_detail.find(text="Salary").findNext('ul').text.strip()
-            except Exception as ex:
-                data_dict['salary'] = "Error"
+            # try:
+            #     data_dict['salary'] = data_detail.find(text="Salary").findNext('ul').text.strip()
+            # except Exception as ex:
+            #     data_dict['salary'] = "Error"
 
             try:
-                data_dict['job_responsibilities'] = [x.text for x in data_detail.find('div', {'class': 'job_des'}).find_all('li')]
-                # data_dict['job_responsibilities'] = data_detail.find(text="Job Responsibilities").findNext('ul').text.strip()
-                # data_dict['job_responsibilities'] = data_detail.find('div', {'class': 'job_des'}), 'p'.text.strip()
-            except Exception as ex:
-                data_dict['job_responsibilities'] = "Error"
+                # data_dict['responsibilities'] = [x.text for x in data_detail.find('div', {'class': 'job_des'}).find_all('li')]
+            # data_dict['responsibilities'] = data_detail.find(text="Job Responsibilities").findNext('ul').text.strip()
+            #     data_dict['responsibilities'] = data_detail.find('div', {'class': 'job_des'}), 'p'.text.strip()
+                data_dict['responsibilities'] = data_detail.find('div', {'class': 'job_des'}).text
 
-
-            try:
-                data_dict['educational_requirements'] = [x.text for x in data_detail.find('div', {'class': 'edu_req'}).find_all('li')]
-                # data_detail.find('div',{'class': 'edu_req'}).text.strip()
             except Exception as ex:
-                data_dict['educational_requirements'] = "Error"
+                data_dict['responsibilities'] = "Error"
+            print(data_dict['responsibilities'])
 
-            try:
-                data_dict['job_requirements'] = [x.text for x in data_detail.find('div', {'class': 'job_req'}).find_all('li')]
-                # data_detail.find('div', {'class': 'job_req'}).text.strip()
-            except Exception as ex:
-                data_dict['job_requirements'] = "Error"
+            # try:
+            #     data_dict['educational_requirements'] = [x.text for x in data_detail.find('div', {'class': 'edu_req'}).find_all('li')]
+            #     # data_detail.find('div',{'class': 'edu_req'}).text.strip()
+            # except Exception as ex:
+            #     data_dict['educational_requirements'] = "Error"
+
+            # try:
+            #     data_dict['job_requirements'] = [x.text for x in data_detail.find('div', {'class': 'job_req'}).find_all('li')]
+            #     # data_detail.find('div', {'class': 'job_req'}).text.strip()
+            # except Exception as ex:
+            #     data_dict['job_requirements'] = "Error"
 
 
 
             try:
-                data_dict['other_benefit'] = [x.text for x in data_detail.find('div', {'class': 'oth_ben'}).find_all('li')]
+                data_dict['other_benefits'] = [x.text for x in data_detail.find('div', {'class': 'oth_ben'}).find_all('li')]
                     # data_detail.find('div', {'class': 'oth_ben '}).text.strip()
             except Exception as ex:
-                data_dict['other_benefit'] = "Error"
+                data_dict['other_benefits'] = "Error"
 
         except Exception as ex:
             print("Detail Data error")
-
         # Calling the write_csv_file function
-        write_csv_file(data_dict)
+       # write_csv_file(data_dict)
 
         # Increment of total_jobs
         total_jobs += 1
 
+        JOB_LIST_API = main_site+'api/job_create/'
+        JOB_LIST_API_KEY = '96d56aceeb9049debeab628ac760aa11'
+        HEADER = {'api-key': JOB_LIST_API_KEY}
+        if data_dict['created_date'] == last_scrapping_date:
+            scrapping_status = False
+            break
+        response = requests.post(JOB_LIST_API,json=data_dict, headers=HEADER)
+
+        print(response)
+
     # Increment page no.
     page_no += 1
+    if scrapping_status == False:
+        break
 
 job_list_file_obj.close()
 
diff --git a/patch_files/professional_profile_api_initial.patch b/patch_files/professional_profile_api_initial.patch
new file mode 100644
index 0000000..7a2d1b4
--- /dev/null
+++ b/patch_files/professional_profile_api_initial.patch
@@ -0,0 +1,588 @@
+diff --git a/job/migrations/0049_merge_20200419_1127.py b/job/migrations/0049_merge_20200419_1127.py
+new file mode 100644
+index 0000000..68f8ca9
+--- /dev/null
++++ b/job/migrations/0049_merge_20200419_1127.py
+@@ -0,0 +1,16 @@
++# Generated by Django 3.0.3 on 2020-04-19 05:27
++
++from django.db import migrations
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ('job', '0046_auto_20200418_1623'),
++        ('job', '0048_auto_20200419_1106'),
++        ('job', '0048_merge_20200415_2120'),
++        ('job', '0046_auto_20200418_1744'),
++    ]
++
++    operations = [
++    ]
+diff --git a/job/migrations/0050_auto_20200419_1815.py b/job/migrations/0050_auto_20200419_1815.py
+new file mode 100644
+index 0000000..11a21d2
+--- /dev/null
++++ b/job/migrations/0050_auto_20200419_1815.py
+@@ -0,0 +1,20 @@
++# Generated by Django 3.0.3 on 2020-04-19 12:15
++
++import datetime
++from django.db import migrations, models
++from django.utils.timezone import utc
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ('job', '0049_merge_20200419_1127'),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name='job',
++            name='created_date',
++            field=models.DateTimeField(default=datetime.datetime(2020, 4, 19, 12, 15, 43, 486874, tzinfo=utc)),
++        ),
++    ]
+diff --git a/pro/admin.py b/pro/admin.py
+index b92e362..6e55325 100644
+--- a/pro/admin.py
++++ b/pro/admin.py
+@@ -1,6 +1,12 @@
+ from django.contrib import admin
+ 
+ # Register your models here.
+-from pro.models import Professional
++from pro.models import *
+ 
+ admin.site.register(Professional)
++admin.site.register(Institute)
++admin.site.register(Nationality)
++admin.site.register(Religion)
++admin.site.register(Major)
++admin.site.register(Organization)
++admin.site.register(CertificateName)
+diff --git a/pro/api.py b/pro/api.py
+index b6d2675..b121260 100644
+--- a/pro/api.py
++++ b/pro/api.py
+@@ -31,9 +31,10 @@ from rest_framework.views import APIView
+ from rest_framework_simplejwt.authentication import AUTH_HEADER_TYPES
+ from rest_framework_simplejwt.exceptions import TokenError, InvalidToken
+ 
++from job.serializers import SkillSerializer
+ from p7.permissions import IsAppAuthenticated
+ from p7.settings_dev import SITE_URL
+-from pro.models import Professional
++from pro.models import Professional, Religion, Nationality
+ from pro.models import Professional, ProfessionalEducation, ProfessionalSkill, WorkExperience, Portfolio, Membership, \
+     Certification, Reference
+ from django.core.mail import EmailMultiAlternatives
+@@ -43,7 +44,7 @@ from django.urls import reverse
+ 
+ from django_rest_passwordreset.signals import reset_password_token_created
+ 
+-from pro.serializers import CustomTokenSerializer, TokenObtainCustomPairSerializer, ProfessionalEducationSerializer
++from pro.serializers import *
+ from pro.serializers import ProfessionalSerializer
+ from resources.strings_pro import *
+ from rest_framework.status import (
+@@ -211,20 +212,22 @@ class ProfessionalDetail(APIView):
+         reference = Reference.objects.filter(professional=pk, is_archived=False)
+ 
+         info_data = ProfessionalSerializer(profile).data
++        info_data['religion_obj'] = ReligionSerializer(profile.religion).data
++        info_data['nationality_obj'] = NationalitySerializer(profile.nationality).data
+         edu_data = [{
+             'education_id': edu.id,
+             'qualification': edu.qualification_id,
+-            'institution': edu.institution_id,
++            'institution_obj': InstituteNameSerializer(edu.institution).data,
+             'cgpa': edu.cgpa,
+-            'major': edu.major_id,
++            'major':MajorSerializer(edu.major).data,
+             'enrolled_date': edu.enrolled_date,
+             'graduation_date': edu.graduation_date,
+         } for edu in education
+         ]
+ 
+         skill_data = [{
+-            'prof_skill_id':skill.id,
+-            'skill': str(skill.name),
++            'id':skill.id,
++            'skill_obj': SkillSerializer(skill.name).data,
+             'rating': skill.rating,
+             'verified_by_skillcheck': skill.verified_by_skillcheck,
+         } for skill in skills
+@@ -248,7 +251,7 @@ class ProfessionalDetail(APIView):
+ 
+         membership_data = [{
+             'membership_id':ms.id,
+-            'org_name': ms.org_name_id,
++            'organization_obj':OrganizationNameSerializer(ms.org_name).data,
+             'position_held': ms.position_held,
+             'membership_ongoing': ms.membership_ongoing,
+             'Start_date': ms.Start_date,
+@@ -259,8 +262,8 @@ class ProfessionalDetail(APIView):
+ 
+         certification_data = [{
+             'certification_id': cert.id,
+-            'certification_name': cert.certification_name_id,
+-            'organization_name': cert.organization_name_id,
++            'certificate_name': CertificateNameSerializer(cert.certification_name).data,
++            'organization': OrganizationNameSerializer(cert.organization_name).data,
+             'has_expiry_period': cert.has_expiry_period,
+             'issue_date': cert.issue_date,
+             'expiry_date': cert.expiry_date,
+@@ -270,7 +273,7 @@ class ProfessionalDetail(APIView):
+         ]
+ 
+         reference_data = [{
+-            'reference_id':ref.id,
++            'id':ref.id,
+             'name': ref.name,
+             'current_position': ref.current_position,
+             'email': ref.email,
+@@ -301,27 +304,58 @@ class ProfessionalDetail(APIView):
+ #
+ #     return Response(HTTP_200_OK)
+ 
+-class ProfessionalEducationSave(generics.ListCreateAPIView):
+-    queryset = ProfessionalEducation.objects.all()
+-    serializer_class = ProfessionalEducationSerializer
++
++class ReligionList(generics.ListCreateAPIView):
++    queryset = Religion.objects.all()
++    serializer_class = ReligionSerializer
++
++class NationalityList(generics.ListCreateAPIView):
++    queryset = Nationality.objects.all()
++    serializer_class = NationalitySerializer
++
++class InstituteList(generics.ListCreateAPIView):
++    queryset = Institute.objects.all()
++    serializer_class = InstituteNameSerializer
++
++class OrganizationList(generics.ListCreateAPIView):
++    queryset = Organization.objects.all()
++    serializer_class = OrganizationNameSerializer
++
++class MajorList(generics.ListCreateAPIView):
++    queryset = Major.objects.all()
++    serializer_class = MajorSerializer
++
++class CertificateNameList(generics.ListCreateAPIView):
++    queryset = CertificateName.objects.all()
++    serializer_class = CertificateNameSerializer
++
+ 
+ @api_view(["POST"])
+-def professional_skill_save(request):
++def professional_education_save(request):
+     data = json.loads(request.body)
++    key_obj = ProfessionalEducation(**data)
++    key_obj.save()
++    data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=data['institution_id'])).data
++    data['major_obj'] = MajorSerializer(Major.objects.get(pk=data['major_id'])).data
++    data['education_id'] = key_obj.id
++    return Response(data)
+ 
++@api_view(["POST"])
++def professional_skill_save(request):
++    data = json.loads(request.body)
+     key_obj = ProfessionalSkill(**data)
+     key_obj.save()
+-
+-    return Response(HTTP_200_OK)
++    data['skill_obj']= SkillSerializer(Skill.objects.get(pk=data['name_id'])).data
++    data['prof_skill_id'] = key_obj.id
++    return Response(data)
+ 
+ @api_view(["POST"])
+ def professional_workexperience_save(request):
+     data = json.loads(request.body)
+-
+     key_obj = WorkExperience(**data)
+     key_obj.save()
+ 
+-    return Response(HTTP_200_OK)
++    return Response(data)
+ 
+ @api_view(["POST"])
+ def professional_portfolio_save(request):
+@@ -330,16 +364,17 @@ def professional_portfolio_save(request):
+     key_obj = Portfolio(**data)
+     key_obj.save()
+ 
+-    return Response(HTTP_200_OK)
++    return Response(data)
+ 
+ @api_view(["POST"])
+ def professional_membership_save(request):
+     data = json.loads(request.body)
+-
+     key_obj = Membership(**data)
+     key_obj.save()
+-
+-    return Response(HTTP_200_OK)
++    data['organizaion_obj'] = OrganizationNameSerializer(
++        Organization.objects.get(pk=data['organization_id'])).data
++    data['membership_id'] = key_obj.id
++    return Response(data)
+ 
+ @api_view(["POST"])
+ def professional_certification_save(request):
+@@ -348,7 +383,7 @@ def professional_certification_save(request):
+     key_obj = Certification(**data)
+     key_obj.save()
+ 
+-    return Response(HTTP_200_OK)
++    return Response(data)
+ 
+ @api_view(["POST"])
+ def professional_reference_save(request):
+@@ -356,8 +391,8 @@ def professional_reference_save(request):
+ 
+     key_obj = Reference(**data)
+     key_obj.save()
+-
+-    return Response(HTTP_200_OK)
++    data['reference_id'] = key_obj.id
++    return Response(data)
+ 
+ 
+ 
+@@ -370,18 +405,18 @@ class ProfessionalUpdateView(APIView):
+             raise Http404
+     def put(self, request, pk, format=None):
+         profile = self.get_object(pk)
+-
+         # image uploading code start here
+-        img_base64 = request.data['image']
+-        if img_base64:
+-            format, imgstr = img_base64.split(';base64,')
+-            ext = format.split('/')[-1]
+-            filename = str(uuid.uuid4()) + '-professional.' + ext
+-            data = ContentFile(base64.b64decode(imgstr), name=filename)
+-            fs = FileSystemStorage()
+-            filename = fs.save(filename, data)
+-            uploaded_file_url = fs.url(filename)
+-            request.data['image'] = uploaded_file_url
++        if 'image' in request.data:
++            img_base64 = request.data['image']
++            if img_base64:
++                format, imgstr = img_base64.split(';base64,')
++                ext = format.split('/')[-1]
++                filename = str(uuid.uuid4()) + '-professional.' + ext
++                data = ContentFile(base64.b64decode(imgstr), name=filename)
++                fs = FileSystemStorage()
++                filename = fs.save(filename, data)
++                uploaded_file_url = fs.url(filename)
++                request.data['image'] = uploaded_file_url
+         # end of image uploading code
+ 
+         serializer = ProfessionalSerializer(profile, data=request.data)
+@@ -654,9 +689,100 @@ class ProfessionalUpdatePartial(GenericAPIView, UpdateModelMixin):
+     queryset = Professional.objects.all()
+     serializer_class = ProfessionalSerializer
+ 
++    def put(self,request,pk, *args, **kwargs,):
++        if 'image' in request.data:
++            img_base64 = request.data['image']
++            if img_base64:
++
++                format, imgstr = img_base64.split(';base64,')
++                ext = format.split('/')[-1]
++                filename = str(uuid.uuid4()) + '-professional.' + ext
++                data = ContentFile(base64.b64decode(imgstr), name=filename)
++                fs = FileSystemStorage()
++                filename = fs.save(filename, data)
++                uploaded_file_url = fs.url(filename)
++                request.data['image'] = uploaded_file_url
++        self.partial_update(request, *args, **kwargs)
++        prof_obj = ProfessionalSerializer(Professional.objects.get(pk=pk)).data
++        prof_obj['religion_obj'] = ReligionSerializer(Religion.objects.get(pk = prof_obj['religion'])).data
++        prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk = prof_obj['nationality'])).data
++        # if 'religion_obj' in request.data:
++        #     prof_obj['religion_obj'] = ReligionSerializer(
++        #         Religion.objects.get(pk=request.data['religion'])).data
++        # if 'nationality_obj' in request.data:
++        #     prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk=request.data['nationality'])).data
++        return Response(prof_obj)
++
++class ReferenceUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = Reference.objects.all()
++    serializer_class = ReferenceSerializer
++
++    def put(self, request,pk, *args, **kwargs):
++        self.partial_update(request, *args, **kwargs)
++        prof_obj = ReferenceSerializer(Reference.objects.get(pk=pk)).data
++        return Response(prof_obj)
++
++class EducationUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = ProfessionalEducation.objects.all()
++    serializer_class = ProfessionalEducationSerializer
++
++    def put(self, request,pk, *args, **kwargs):
++        self.partial_update(request, *args, **kwargs)
++        request.data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=request.data['institution_id'])).data
++        request.data['major_obj'] = MajorSerializer(Major.objects.get(pk=request.data['major.id'])).data
++        prof_obj = ProfessionalEducation.objects.get(pk=pk)
++        request.data['education_id'] = prof_obj.id
++        return Response(request.data)
++
++class SkillUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = ProfessionalSkill.objects.all()
++    serializer_class = ProfessionalSkillSerializer
++
++    def put(self, request,pk, *args, **kwargs):
++        self.partial_update(request, *args, **kwargs)
++        prof_obj = ProfessionalSkillSerializer(ProfessionalSkill.objects.get(pk=pk)).data
++        print(prof_obj)
++        if 'name_id' in request.data:
++            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=request.data['name_id'])).data
++        else:
++            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=prof_obj['name'])).data
++        return Response(prof_obj)
++
++class WorkExperienceUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = WorkExperience.objects.all()
++    serializer_class = WorkExperienceSerializer
++
++    def put(self, request, *args, **kwargs):
++        return self.partial_update(request, *args, **kwargs)
++
++class PortfolioUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = Portfolio.objects.all()
++    serializer_class = PortfolioSerializer
++
++    def put(self, request, *args, **kwargs):
++        return self.partial_update(request, *args, **kwargs)
++
++class MembershipUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = Membership.objects.all()
++    serializer_class = MembershipSerializer
++
++    def put(self, request,pk, *args, **kwargs):
++        self.partial_update(request, *args, **kwargs)
++        if 'organization_id' in request.data:
++            request.data['organizaion_obj'] = OrganizationNameSerializer(
++                Organization.objects.get(pk=request.data['organization_id'])).data
++            prof_obj = Membership.objects.get(pk=pk)
++            request.data['membership_id'] = prof_obj.id
++        return Response(request.data)
++
++class CertificationUpdateDelete(GenericAPIView, UpdateModelMixin):
++    queryset = Certification.objects.all()
++    serializer_class = CertificationSerializer
++
+     def put(self, request, *args, **kwargs):
+         return self.partial_update(request, *args, **kwargs)
+ 
++
+ # @api_view(["GET"])
+ # def professional_info(request,pk):
+ #     basic_info = Professional.objects.get(pk=pk)
+diff --git a/pro/migrations/0029_professional_current_location.py b/pro/migrations/0029_professional_current_location.py
+new file mode 100644
+index 0000000..af487be
+--- /dev/null
++++ b/pro/migrations/0029_professional_current_location.py
+@@ -0,0 +1,18 @@
++# Generated by Django 3.0.3 on 2020-04-19 12:15
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ('pro', '0028_workexperience_currently_working_here'),
++    ]
++
++    operations = [
++        migrations.AddField(
++            model_name='professional',
++            name='current_location',
++            field=models.CharField(blank=True, max_length=255, null=True),
++        ),
++    ]
+diff --git a/pro/models.py b/pro/models.py
+index afa1f7a..b7e028e 100644
+--- a/pro/models.py
++++ b/pro/models.py
+@@ -87,6 +87,9 @@ class Professional(models.Model):
+     nationality = models.ForeignKey(Nationality,on_delete=models.PROTECT, null=True, blank=True)
+     religion = models.ForeignKey(Religion,on_delete=models.PROTECT, null=True, blank=True)
+     permanent_address = models.CharField(max_length=255, null=True, blank=True)
++    current_location = models.CharField(max_length=255, null=True, blank=True)
++
++
+ 
+ 
+ 
+@@ -107,10 +110,12 @@ class Professional(models.Model):
+ 
+ class ProfessionalEducation(models.Model):
+     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
+-    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT)
++    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT) # name = degree
+     institution = models.ForeignKey(Institute, on_delete=models.PROTECT, null=True, blank=True)
++    # new_institution = models.CharField(max_length=255,blank=True, null=True)
+     cgpa = models.CharField(max_length=255, blank=True, null=True)
+     major = models.ForeignKey(Major, on_delete=models.PROTECT, null=True, blank=True)
++    # new_major = models.CharField(max_length=255,blank=True, null=True)
+     enrolled_date = models.DateField(null=True, blank=True)
+     graduation_date = models.DateField(null=True, blank=True)
+     created_date = models.DateTimeField(default=timezone.now)
+@@ -136,7 +141,8 @@ class ProfessionalSkill(models.Model):
+ 
+ class WorkExperience(models.Model):
+     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
+-    company = models.ForeignKey(Company, on_delete=models.PROTECT)
++    company = models.ForeignKey(Company, on_delete=models.PROTECT )
++    # new_company = models.CharField(max_length=255)
+     designation = models.CharField(max_length=255, blank=True, null=True)
+     Started_date = models.DateField(null=True, blank=True)
+     end_date = models.DateField(null=True, blank=True)
+@@ -164,6 +170,7 @@ class Portfolio(models.Model):
+ class Membership(models.Model):
+     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
+     org_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
++    # new_organization = models.CharField(max_length=255,blank=True, null=True)
+     position_held = models.CharField(max_length=255, blank=True, null=True)
+     membership_ongoing = models.BooleanField(default=False)
+     Start_date = models.DateField(null=True, blank=True)
+@@ -188,7 +195,9 @@ class CertificateName(models.Model):
+ class Certification(models.Model):
+     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
+     certification_name = models.ForeignKey(CertificateName,on_delete=models.PROTECT)
++    # new_certificate_name = models.CharField(max_length=255)
+     organization_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
++    # new_organization = models.CharField(max_length=255,blank=True, null=True)
+     has_expiry_period = models.BooleanField(default=True)
+     issue_date = models.DateField(null=True, blank=True)
+     expiry_date = models.DateField(null=True, blank=True)
+diff --git a/pro/serializers.py b/pro/serializers.py
+index 85ea206..53a0477 100644
+--- a/pro/serializers.py
++++ b/pro/serializers.py
+@@ -4,7 +4,7 @@ from rest_framework_simplejwt.state import User
+ from django.contrib.auth import authenticate
+ from rest_framework_simplejwt.tokens import RefreshToken
+ 
+-from pro.models import Professional, ProfessionalEducation
++from pro.models import *
+ from rest_framework import exceptions
+ from django.utils.translation import ugettext_lazy as _
+ from resources.strings_pro import *
+@@ -20,6 +20,69 @@ class ProfessionalEducationSerializer(serializers.ModelSerializer):
+         model = ProfessionalEducation
+         fields = '__all__'
+ 
++class ReferenceSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Reference
++        fields = '__all__'
++
++class ProfessionalSkillSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = ProfessionalSkill
++        fields = '__all__'
++
++class WorkExperienceSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = WorkExperience
++        fields = '__all__'
++
++class PortfolioSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Portfolio
++        fields = '__all__'
++
++class MembershipSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Membership
++        fields = '__all__'
++
++class CertificationSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Certification
++        fields = '__all__'
++
++
++class ReligionSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Religion
++        fields = '__all__'
++
++class NationalitySerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Nationality
++        fields = '__all__'
++
++class CertificateNameSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = CertificateName
++        fields = '__all__'
++
++class MajorSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Major
++        fields = '__all__'
++
++class OrganizationNameSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Organization
++        fields = '__all__'
++
++class InstituteNameSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Institute
++        fields = '__all__'
++
++
++
+ class CustomTokenSerializer(serializers.Serializer):
+     token = serializers.CharField()
+ 
+diff --git a/pro/urls.py b/pro/urls.py
+index aa517e7..bd6e0e0 100644
+--- a/pro/urls.py
++++ b/pro/urls.py
+@@ -25,12 +25,24 @@ urlpatterns = [
+     path('job_alert/', job_alert),
+     path('job_alert_notification/', job_alert_notification),
+     path('profile_update_partial/<str:pk>/', ProfessionalUpdatePartial.as_view()),
+-    path('professional_education_save/', ProfessionalEducationSave.as_view()),
+-    path('professional_skill_save/', professional_skill_save),
+-    path('professional_work_experience_save/', professional_workexperience_save),
+-    path('professional_portfolio_save/', professional_portfolio_save),
+-    path('professional_membership_save/', professional_membership_save),
+-    path('professional_certification_save/', professional_certification_save),
+-    path('professional_reference_save/', professional_reference_save),
+-    # path('professional_info/<str:pk>/', professional_info),
++    path('professional_education/', professional_education_save),
++    path('professional_education/<str:pk>/', EducationUpdateDelete.as_view()),
++    path('professional_skill/', professional_skill_save),
++    path('professional_skill/<str:pk>/', SkillUpdateDelete.as_view()),
++    path('professional_work_experience/', professional_workexperience_save),
++    path('professional_work_experience/<str:pk>/', WorkExperienceUpdateDelete.as_view()),
++    path('professional_portfolio/', professional_portfolio_save),
++    path('professional_portfolio/<str:pk>/', PortfolioUpdateDelete.as_view()),
++    path('professional_membership/', professional_membership_save),
++    path('professional_membership/<str:pk>/', MembershipUpdateDelete.as_view()),
++    path('professional_certification/', professional_certification_save),
++    path('professional_certification/<str:pk>/', CertificationUpdateDelete.as_view()),
++    path('professional_reference/', professional_reference_save),
++    path('professional_reference/<str:pk>/', ReferenceUpdateDelete.as_view()),
++    path('religion/', ReligionList.as_view()),
++    path('nationality/', NationalityList.as_view()),
++    path('organization/', OrganizationList.as_view()),
++    path('major/', InstituteList.as_view()),
++    path('institute/', InstituteList.as_view()),
++    path('certificate_name/', CertificateNameList.as_view()),
+ ]
+\ No newline at end of file
diff --git a/pro/admin.py b/pro/admin.py
index b92e362..6e55325 100644
--- a/pro/admin.py
+++ b/pro/admin.py
@@ -1,6 +1,12 @@
 from django.contrib import admin
 
 # Register your models here.
-from pro.models import Professional
+from pro.models import *
 
 admin.site.register(Professional)
+admin.site.register(Institute)
+admin.site.register(Nationality)
+admin.site.register(Religion)
+admin.site.register(Major)
+admin.site.register(Organization)
+admin.site.register(CertificateName)
diff --git a/pro/api.py b/pro/api.py
index b6d2675..b121260 100644
--- a/pro/api.py
+++ b/pro/api.py
@@ -31,9 +31,10 @@ from rest_framework.views import APIView
 from rest_framework_simplejwt.authentication import AUTH_HEADER_TYPES
 from rest_framework_simplejwt.exceptions import TokenError, InvalidToken
 
+from job.serializers import SkillSerializer
 from p7.permissions import IsAppAuthenticated
 from p7.settings_dev import SITE_URL
-from pro.models import Professional
+from pro.models import Professional, Religion, Nationality
 from pro.models import Professional, ProfessionalEducation, ProfessionalSkill, WorkExperience, Portfolio, Membership, \
     Certification, Reference
 from django.core.mail import EmailMultiAlternatives
@@ -43,7 +44,7 @@ from django.urls import reverse
 
 from django_rest_passwordreset.signals import reset_password_token_created
 
-from pro.serializers import CustomTokenSerializer, TokenObtainCustomPairSerializer, ProfessionalEducationSerializer
+from pro.serializers import *
 from pro.serializers import ProfessionalSerializer
 from resources.strings_pro import *
 from rest_framework.status import (
@@ -211,20 +212,22 @@ class ProfessionalDetail(APIView):
         reference = Reference.objects.filter(professional=pk, is_archived=False)
 
         info_data = ProfessionalSerializer(profile).data
+        info_data['religion_obj'] = ReligionSerializer(profile.religion).data
+        info_data['nationality_obj'] = NationalitySerializer(profile.nationality).data
         edu_data = [{
             'education_id': edu.id,
             'qualification': edu.qualification_id,
-            'institution': edu.institution_id,
+            'institution_obj': InstituteNameSerializer(edu.institution).data,
             'cgpa': edu.cgpa,
-            'major': edu.major_id,
+            'major':MajorSerializer(edu.major).data,
             'enrolled_date': edu.enrolled_date,
             'graduation_date': edu.graduation_date,
         } for edu in education
         ]
 
         skill_data = [{
-            'prof_skill_id':skill.id,
-            'skill': str(skill.name),
+            'id':skill.id,
+            'skill_obj': SkillSerializer(skill.name).data,
             'rating': skill.rating,
             'verified_by_skillcheck': skill.verified_by_skillcheck,
         } for skill in skills
@@ -248,7 +251,7 @@ class ProfessionalDetail(APIView):
 
         membership_data = [{
             'membership_id':ms.id,
-            'org_name': ms.org_name_id,
+            'organization_obj':OrganizationNameSerializer(ms.org_name).data,
             'position_held': ms.position_held,
             'membership_ongoing': ms.membership_ongoing,
             'Start_date': ms.Start_date,
@@ -259,8 +262,8 @@ class ProfessionalDetail(APIView):
 
         certification_data = [{
             'certification_id': cert.id,
-            'certification_name': cert.certification_name_id,
-            'organization_name': cert.organization_name_id,
+            'certificate_name': CertificateNameSerializer(cert.certification_name).data,
+            'organization': OrganizationNameSerializer(cert.organization_name).data,
             'has_expiry_period': cert.has_expiry_period,
             'issue_date': cert.issue_date,
             'expiry_date': cert.expiry_date,
@@ -270,7 +273,7 @@ class ProfessionalDetail(APIView):
         ]
 
         reference_data = [{
-            'reference_id':ref.id,
+            'id':ref.id,
             'name': ref.name,
             'current_position': ref.current_position,
             'email': ref.email,
@@ -301,27 +304,58 @@ class ProfessionalDetail(APIView):
 #
 #     return Response(HTTP_200_OK)
 
-class ProfessionalEducationSave(generics.ListCreateAPIView):
-    queryset = ProfessionalEducation.objects.all()
-    serializer_class = ProfessionalEducationSerializer
+
+class ReligionList(generics.ListCreateAPIView):
+    queryset = Religion.objects.all()
+    serializer_class = ReligionSerializer
+
+class NationalityList(generics.ListCreateAPIView):
+    queryset = Nationality.objects.all()
+    serializer_class = NationalitySerializer
+
+class InstituteList(generics.ListCreateAPIView):
+    queryset = Institute.objects.all()
+    serializer_class = InstituteNameSerializer
+
+class OrganizationList(generics.ListCreateAPIView):
+    queryset = Organization.objects.all()
+    serializer_class = OrganizationNameSerializer
+
+class MajorList(generics.ListCreateAPIView):
+    queryset = Major.objects.all()
+    serializer_class = MajorSerializer
+
+class CertificateNameList(generics.ListCreateAPIView):
+    queryset = CertificateName.objects.all()
+    serializer_class = CertificateNameSerializer
+
 
 @api_view(["POST"])
-def professional_skill_save(request):
+def professional_education_save(request):
     data = json.loads(request.body)
+    key_obj = ProfessionalEducation(**data)
+    key_obj.save()
+    data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=data['institution_id'])).data
+    data['major_obj'] = MajorSerializer(Major.objects.get(pk=data['major_id'])).data
+    data['education_id'] = key_obj.id
+    return Response(data)
 
+@api_view(["POST"])
+def professional_skill_save(request):
+    data = json.loads(request.body)
     key_obj = ProfessionalSkill(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['skill_obj']= SkillSerializer(Skill.objects.get(pk=data['name_id'])).data
+    data['prof_skill_id'] = key_obj.id
+    return Response(data)
 
 @api_view(["POST"])
 def professional_workexperience_save(request):
     data = json.loads(request.body)
-
     key_obj = WorkExperience(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_portfolio_save(request):
@@ -330,16 +364,17 @@ def professional_portfolio_save(request):
     key_obj = Portfolio(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_membership_save(request):
     data = json.loads(request.body)
-
     key_obj = Membership(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['organizaion_obj'] = OrganizationNameSerializer(
+        Organization.objects.get(pk=data['organization_id'])).data
+    data['membership_id'] = key_obj.id
+    return Response(data)
 
 @api_view(["POST"])
 def professional_certification_save(request):
@@ -348,7 +383,7 @@ def professional_certification_save(request):
     key_obj = Certification(**data)
     key_obj.save()
 
-    return Response(HTTP_200_OK)
+    return Response(data)
 
 @api_view(["POST"])
 def professional_reference_save(request):
@@ -356,8 +391,8 @@ def professional_reference_save(request):
 
     key_obj = Reference(**data)
     key_obj.save()
-
-    return Response(HTTP_200_OK)
+    data['reference_id'] = key_obj.id
+    return Response(data)
 
 
 
@@ -370,18 +405,18 @@ class ProfessionalUpdateView(APIView):
             raise Http404
     def put(self, request, pk, format=None):
         profile = self.get_object(pk)
-
         # image uploading code start here
-        img_base64 = request.data['image']
-        if img_base64:
-            format, imgstr = img_base64.split(';base64,')
-            ext = format.split('/')[-1]
-            filename = str(uuid.uuid4()) + '-professional.' + ext
-            data = ContentFile(base64.b64decode(imgstr), name=filename)
-            fs = FileSystemStorage()
-            filename = fs.save(filename, data)
-            uploaded_file_url = fs.url(filename)
-            request.data['image'] = uploaded_file_url
+        if 'image' in request.data:
+            img_base64 = request.data['image']
+            if img_base64:
+                format, imgstr = img_base64.split(';base64,')
+                ext = format.split('/')[-1]
+                filename = str(uuid.uuid4()) + '-professional.' + ext
+                data = ContentFile(base64.b64decode(imgstr), name=filename)
+                fs = FileSystemStorage()
+                filename = fs.save(filename, data)
+                uploaded_file_url = fs.url(filename)
+                request.data['image'] = uploaded_file_url
         # end of image uploading code
 
         serializer = ProfessionalSerializer(profile, data=request.data)
@@ -654,9 +689,100 @@ class ProfessionalUpdatePartial(GenericAPIView, UpdateModelMixin):
     queryset = Professional.objects.all()
     serializer_class = ProfessionalSerializer
 
+    def put(self,request,pk, *args, **kwargs,):
+        if 'image' in request.data:
+            img_base64 = request.data['image']
+            if img_base64:
+
+                format, imgstr = img_base64.split(';base64,')
+                ext = format.split('/')[-1]
+                filename = str(uuid.uuid4()) + '-professional.' + ext
+                data = ContentFile(base64.b64decode(imgstr), name=filename)
+                fs = FileSystemStorage()
+                filename = fs.save(filename, data)
+                uploaded_file_url = fs.url(filename)
+                request.data['image'] = uploaded_file_url
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ProfessionalSerializer(Professional.objects.get(pk=pk)).data
+        prof_obj['religion_obj'] = ReligionSerializer(Religion.objects.get(pk = prof_obj['religion'])).data
+        prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk = prof_obj['nationality'])).data
+        # if 'religion_obj' in request.data:
+        #     prof_obj['religion_obj'] = ReligionSerializer(
+        #         Religion.objects.get(pk=request.data['religion'])).data
+        # if 'nationality_obj' in request.data:
+        #     prof_obj['nationality_obj'] = NationalitySerializer(Nationality.objects.get(pk=request.data['nationality'])).data
+        return Response(prof_obj)
+
+class ReferenceUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Reference.objects.all()
+    serializer_class = ReferenceSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ReferenceSerializer(Reference.objects.get(pk=pk)).data
+        return Response(prof_obj)
+
+class EducationUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = ProfessionalEducation.objects.all()
+    serializer_class = ProfessionalEducationSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        request.data['institution_obj'] = InstituteNameSerializer(Institute.objects.get(pk=request.data['institution_id'])).data
+        request.data['major_obj'] = MajorSerializer(Major.objects.get(pk=request.data['major.id'])).data
+        prof_obj = ProfessionalEducation.objects.get(pk=pk)
+        request.data['education_id'] = prof_obj.id
+        return Response(request.data)
+
+class SkillUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = ProfessionalSkill.objects.all()
+    serializer_class = ProfessionalSkillSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        prof_obj = ProfessionalSkillSerializer(ProfessionalSkill.objects.get(pk=pk)).data
+        print(prof_obj)
+        if 'name_id' in request.data:
+            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=request.data['name_id'])).data
+        else:
+            prof_obj['skill_obj'] = SkillSerializer(Skill.objects.get(pk=prof_obj['name'])).data
+        return Response(prof_obj)
+
+class WorkExperienceUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = WorkExperience.objects.all()
+    serializer_class = WorkExperienceSerializer
+
+    def put(self, request, *args, **kwargs):
+        return self.partial_update(request, *args, **kwargs)
+
+class PortfolioUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Portfolio.objects.all()
+    serializer_class = PortfolioSerializer
+
+    def put(self, request, *args, **kwargs):
+        return self.partial_update(request, *args, **kwargs)
+
+class MembershipUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Membership.objects.all()
+    serializer_class = MembershipSerializer
+
+    def put(self, request,pk, *args, **kwargs):
+        self.partial_update(request, *args, **kwargs)
+        if 'organization_id' in request.data:
+            request.data['organizaion_obj'] = OrganizationNameSerializer(
+                Organization.objects.get(pk=request.data['organization_id'])).data
+            prof_obj = Membership.objects.get(pk=pk)
+            request.data['membership_id'] = prof_obj.id
+        return Response(request.data)
+
+class CertificationUpdateDelete(GenericAPIView, UpdateModelMixin):
+    queryset = Certification.objects.all()
+    serializer_class = CertificationSerializer
+
     def put(self, request, *args, **kwargs):
         return self.partial_update(request, *args, **kwargs)
 
+
 # @api_view(["GET"])
 # def professional_info(request,pk):
 #     basic_info = Professional.objects.get(pk=pk)
diff --git a/pro/migrations/0029_professional_current_location.py b/pro/migrations/0029_professional_current_location.py
new file mode 100644
index 0000000..af487be
--- /dev/null
+++ b/pro/migrations/0029_professional_current_location.py
@@ -0,0 +1,18 @@
+# Generated by Django 3.0.3 on 2020-04-19 12:15
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('pro', '0028_workexperience_currently_working_here'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='professional',
+            name='current_location',
+            field=models.CharField(blank=True, max_length=255, null=True),
+        ),
+    ]
diff --git a/pro/models.py b/pro/models.py
index afa1f7a..b7e028e 100644
--- a/pro/models.py
+++ b/pro/models.py
@@ -87,6 +87,9 @@ class Professional(models.Model):
     nationality = models.ForeignKey(Nationality,on_delete=models.PROTECT, null=True, blank=True)
     religion = models.ForeignKey(Religion,on_delete=models.PROTECT, null=True, blank=True)
     permanent_address = models.CharField(max_length=255, null=True, blank=True)
+    current_location = models.CharField(max_length=255, null=True, blank=True)
+
+
 
 
 
@@ -107,10 +110,12 @@ class Professional(models.Model):
 
 class ProfessionalEducation(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
-    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT)
+    qualification = models.ForeignKey(Qualification, on_delete=models.PROTECT) # name = degree
     institution = models.ForeignKey(Institute, on_delete=models.PROTECT, null=True, blank=True)
+    # new_institution = models.CharField(max_length=255,blank=True, null=True)
     cgpa = models.CharField(max_length=255, blank=True, null=True)
     major = models.ForeignKey(Major, on_delete=models.PROTECT, null=True, blank=True)
+    # new_major = models.CharField(max_length=255,blank=True, null=True)
     enrolled_date = models.DateField(null=True, blank=True)
     graduation_date = models.DateField(null=True, blank=True)
     created_date = models.DateTimeField(default=timezone.now)
@@ -136,7 +141,8 @@ class ProfessionalSkill(models.Model):
 
 class WorkExperience(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
-    company = models.ForeignKey(Company, on_delete=models.PROTECT)
+    company = models.ForeignKey(Company, on_delete=models.PROTECT )
+    # new_company = models.CharField(max_length=255)
     designation = models.CharField(max_length=255, blank=True, null=True)
     Started_date = models.DateField(null=True, blank=True)
     end_date = models.DateField(null=True, blank=True)
@@ -164,6 +170,7 @@ class Portfolio(models.Model):
 class Membership(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
     org_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
+    # new_organization = models.CharField(max_length=255,blank=True, null=True)
     position_held = models.CharField(max_length=255, blank=True, null=True)
     membership_ongoing = models.BooleanField(default=False)
     Start_date = models.DateField(null=True, blank=True)
@@ -188,7 +195,9 @@ class CertificateName(models.Model):
 class Certification(models.Model):
     professional = models.ForeignKey(Professional,on_delete=models.PROTECT)
     certification_name = models.ForeignKey(CertificateName,on_delete=models.PROTECT)
+    # new_certificate_name = models.CharField(max_length=255)
     organization_name = models.ForeignKey(Organization,on_delete=models.PROTECT)
+    # new_organization = models.CharField(max_length=255,blank=True, null=True)
     has_expiry_period = models.BooleanField(default=True)
     issue_date = models.DateField(null=True, blank=True)
     expiry_date = models.DateField(null=True, blank=True)
diff --git a/pro/serializers.py b/pro/serializers.py
index 85ea206..53a0477 100644
--- a/pro/serializers.py
+++ b/pro/serializers.py
@@ -4,7 +4,7 @@ from rest_framework_simplejwt.state import User
 from django.contrib.auth import authenticate
 from rest_framework_simplejwt.tokens import RefreshToken
 
-from pro.models import Professional, ProfessionalEducation
+from pro.models import *
 from rest_framework import exceptions
 from django.utils.translation import ugettext_lazy as _
 from resources.strings_pro import *
@@ -20,6 +20,69 @@ class ProfessionalEducationSerializer(serializers.ModelSerializer):
         model = ProfessionalEducation
         fields = '__all__'
 
+class ReferenceSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Reference
+        fields = '__all__'
+
+class ProfessionalSkillSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = ProfessionalSkill
+        fields = '__all__'
+
+class WorkExperienceSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = WorkExperience
+        fields = '__all__'
+
+class PortfolioSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Portfolio
+        fields = '__all__'
+
+class MembershipSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Membership
+        fields = '__all__'
+
+class CertificationSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Certification
+        fields = '__all__'
+
+
+class ReligionSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Religion
+        fields = '__all__'
+
+class NationalitySerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Nationality
+        fields = '__all__'
+
+class CertificateNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = CertificateName
+        fields = '__all__'
+
+class MajorSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Major
+        fields = '__all__'
+
+class OrganizationNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Organization
+        fields = '__all__'
+
+class InstituteNameSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Institute
+        fields = '__all__'
+
+
+
 class CustomTokenSerializer(serializers.Serializer):
     token = serializers.CharField()
 
diff --git a/pro/templates/register.html b/pro/templates/register.html
index ecc9cf2..6810e80 100644
--- a/pro/templates/register.html
+++ b/pro/templates/register.html
@@ -1,6 +1,6 @@
 <!doctype html>
 <html lang="en">
-  <head>
+<head>
     {% load static %}
     <!-- Required meta tags -->
     <meta charset="utf-8">
@@ -45,84 +45,85 @@
     <![endif]-->
 
 </head>
-  <body>
+<body>
 
-    <header class="header-2 access-page-nav">
-      <div class="container">
+<header class="header-2 access-page-nav">
+    <div class="container">
         <div class="row">
-          <div class="col">
-            <div class="header-top">
-              <div class="logo-area">
-                <a href="{% url 'home' %}"><img src="{% static 'images/logo-2.png' %}" alt=""></a>
-              </div>
-              <div class="top-nav">
-                <a href="/professional/sign-in" class="account-page-link">Sign In</a>
-              </div>
+            <div class="col">
+                <div class="header-top">
+                    <div class="logo-area">
+                        <a href="{% url 'home' %}"><img src="{% static 'images/logo-2.png' %}" alt=""></a>
+                    </div>
+                    <div class="top-nav">
+                        <a href="/professional/sign-in" class="account-page-link">Sign In</a>
+                    </div>
+                </div>
             </div>
-          </div>
         </div>
-      </div>
-    </header>
- 
-    <div class="padding-top-90 padding-bottom-90 access-page-bg">
-      <div class="container">
+    </div>
+</header>
+
+<div class="padding-top-90 padding-bottom-90 access-page-bg">
+    <div class="container">
         <div class="row">
-          <div class="col-xl-4 col-md-6">
-            <div class="access-form">
-              <div class="form-header">
-                <h5><i data-feather="edit"></i>Register Account</h5>
-              </div>
-              <div class="account-type display-none">
-                <label for="idRegisterCan">
-                  <input id="idRegisterCan" type="radio" name="register">
-                  <span>Candidate</span>
-                </label>
-                <label for="idRegisterEmp">
-                  <input id="idRegisterEmp" type="radio" name="register">
-                  <span>Employer</span>
-                </label>
-              </div>
-                <form action="/api/professional/create_with_user/" id="sign-up" class="ajax" method="POST" novalidate="novalidate" data-callback="signUpCallback">
-                    <div class="form-group">
-                        <input type="text" name="full_name" id="full_name" placeholder="Name" class="form-control" required data-msg-required="Name is required">
-                    </div>
-                    <div class="form-group">
-                        <input type="email" name="email" id="email" placeholder="Email Address" class="form-control" required data-msg-required="Email is required" data-msg-email="Please enter a valid email">
-                        <input type="text" name="alert" id="alert" class="display-none">
+            <div class="col-xl-4 col-md-6">
+                <div class="access-form">
+                    <div class="form-header">
+                        <h5><i data-feather="edit"></i>Register Account</h5>
                     </div>
-                    <div class="form-group">
-                        <input type="text" regex="\+?(88)?0?1[56789][0-9]{8}\b" name="phone" placeholder="Mobile" class="form-control" data-msg-regex="Enter a valid Mobile Number" required data-msg-required="Mobile is required">
+                    <div class="account-type display-none">
+                        <label for="idRegisterCan">
+                            <input id="idRegisterCan" type="radio" name="register">
+                            <span>Candidate</span>
+                        </label>
+                        <label for="idRegisterEmp">
+                            <input id="idRegisterEmp" type="radio" name="register">
+                            <span>Employer</span>
+                        </label>
                     </div>
-                    <div class="form-group">
-                        <input type="password" minlength="8" id="password" regex='(?=.*?[0-9])(?=.*?[A-Za-z]).+' name="password" placeholder="Password" class="form-control" required data-msg-required="Password is required">
-                        <i class="fas fa-question-circle question-mark" data-toggle="tooltip" title="Password must be at least 8 characters long with at least one digit and one letter."></i>
-                    </div>
-                    <div class="form-group">
-                        <input type="password" name="confirm_password" placeholder="Confirm Password" class="form-control" required data-msg-required="Confirm Password is required" data-rule-equalto="#password" data-msg-equalto="Password and confirm password should be same!!">
-                    </div>
-                    <div class="more-option terms">
-                        <div class="mt-0 terms">
-                            <input class="custom-radio" type="checkbox" id="radio-4" name="terms_and_condition_status">
-                            <label for="radio-4">
-                                <span class="dot"></span> I accept the <a href="/terms-and-condition">terms and conditions</a>
-                            </label>
+                    <form action="/api/professional/create_with_user/" id="sign-up" class="ajax" method="POST" novalidate="novalidate" data-callback="signUpCallback">
+                        <div class="form-group">
+                            <input type="text" name="full_name" id="full_name" placeholder="Name" class="form-control" required data-msg-required="Name is required">
+                        </div>
+
+                        <div class="form-group">
+                            <input type="text" name="email" id="email" regex='^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' placeholder="Email Address" class="form-control" required data-msg-required="Email is required" data-msg-regex="Please enter a valid email">
+                            <input type="text" name="alert" id="alert" class="display-none">
+                        </div>
+                        <div class="form-group">
+                            <input type="text" regex="\+?(88)?0?1[56789][0-9]{8}\b" name="phone" placeholder="Mobile" class="form-control" data-msg-regex="Enter a valid Mobile Number" required data-msg-required="Mobile is required">
                         </div>
+                        <div class="form-group">
+                            <input type="password" minlength="8" id="password" regex='(?=.*?[0-9])(?=.*?[A-Za-z]).+' name="password" placeholder="Password" class="form-control" required data-msg-required="Password is required">
+                            <i class="fas fa-question-circle question-mark" data-toggle="tooltip" title="Password must be at least 8 characters long with at least one digit and one letter."></i>
+                        </div>
+                        <div class="form-group">
+                            <input type="password" name="confirm_password" placeholder="Confirm Password" class="form-control" required data-msg-required="Confirm Password is required" data-rule-equalto="#password" data-msg-equalto="Password and confirm password should be same!!">
+                        </div>
+                        <div class="more-option terms">
+                            <div class="mt-0 terms">
+                                <input class="custom-radio" type="checkbox" id="terms_and_condition_status" name="terms_and_condition_status" required data-msg-required="Please agree our terms & conditions">
+                                <label for="terms_and_condition_status" id="errorToShow">
+                                    <span class="dot"></span> I accept the <a href="/terms-and-condition">terms & conditions</a>
+                                </label>
+                            </div>
+                        </div>
+                        <button class="button primary-bg btn-block">Register</button>
+                    </form>
+                    <div class="shortcut-login">
+                        <span class="display-none">Or connect with</span>
+                        <div class="buttons display-none">
+                            <a href="#" class="facebook"><i class="fab fa-facebook-f"></i>Facebook</a>
+                            <a href="#" class="google"><i class="fab fa-google"></i>Google</a>
+                        </div>
+                        <p>Already have an account? <a href="/professional/sign-in">Sign In</a></p>
                     </div>
-                    <button class="button primary-bg btn-block">Register</button>
-                </form>
-              <div class="shortcut-login">
-                <span class="display-none">Or connect with</span>
-                <div class="buttons display-none">
-                  <a href="#" class="facebook"><i class="fab fa-facebook-f"></i>Facebook</a>
-                  <a href="#" class="google"><i class="fab fa-google"></i>Google</a>
                 </div>
-                <p>Already have an account? <a href="/professional/sign-in">Sign In</a></p>
-              </div>
             </div>
-          </div>
         </div>
-      </div>
     </div>
+</div>
 
 
 <!-- Optional JavaScript -->
@@ -150,45 +151,6 @@
 <script src="{% static 'dashboard/js/dashboard.js' %}"></script>
 <script src="{% static 'dashboard/js/datePicker.js' %}"></script>
 <script src="{% static 'dashboard/js/upload-input.js' %}"></script>
-    <script>
-        $(document).ready(function() {
-            var urlParams = new URLSearchParams(window.location.search);
-            if(urlParams.has('email')){
-                $('#email').val(urlParams.get('email'));
-                $('#alert').val('on');
-            }
-            $('#sign-up').validate({
-                errorClass: "my-error-class"
-            });
-            $('[data-toggle="tooltip"]').tooltip({
-                animated: 'fade',
-                trigger: 'click',
-                placement: 'bottom',
-            });
-            initAjaxForms();
-        });
-        function  signUpCallback(data){
-            if(data.responseJSON.code == 200){
-                {#var id = data.responseJSON.result.user.professional;#}
-                showSuccess("Sign Up Successful!", "A verification code was sent to your email")
-                setTimeout(function(){
-                window.location.href = "/professional/sign-in/";
-                                    }, 3500);
-            }
-            else {
-                showError('Failed!','Email already exists!')
-            }
-        };
-        $('html').on('click', function (e) {
-            $('[data-toggle=tooltip]').each(function () {
-                // hide any open popovers when the anywhere else in the body is clicked
-                if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.tooltip').has(e.target).length === 0) {
-                    $(this).tooltip('hide');
-                }
-            });
-        });
-    </script>
-  </body>
 <script>
     $(document).ready(function() {
         var urlParams = new URLSearchParams(window.location.search);
@@ -217,9 +179,12 @@
     function  signUpCallback(data){
         if(data.responseJSON.code == 200){
             {#var id = data.responseJSON.result.user.professional;#}
+            $("#sign-up").toggle();
             showSuccess("Sign Up Successful!", "A verification code was sent to your email")
+
         }
         else {
+            $("#sign-up").toggle();
             showError('Failed!','Email already exists!')
         }
     };
diff --git a/pro/urls.py b/pro/urls.py
index aa517e7..bd6e0e0 100644
--- a/pro/urls.py
+++ b/pro/urls.py
@@ -25,12 +25,24 @@ urlpatterns = [
     path('job_alert/', job_alert),
     path('job_alert_notification/', job_alert_notification),
     path('profile_update_partial/<str:pk>/', ProfessionalUpdatePartial.as_view()),
-    path('professional_education_save/', ProfessionalEducationSave.as_view()),
-    path('professional_skill_save/', professional_skill_save),
-    path('professional_work_experience_save/', professional_workexperience_save),
-    path('professional_portfolio_save/', professional_portfolio_save),
-    path('professional_membership_save/', professional_membership_save),
-    path('professional_certification_save/', professional_certification_save),
-    path('professional_reference_save/', professional_reference_save),
-    # path('professional_info/<str:pk>/', professional_info),
+    path('professional_education/', professional_education_save),
+    path('professional_education/<str:pk>/', EducationUpdateDelete.as_view()),
+    path('professional_skill/', professional_skill_save),
+    path('professional_skill/<str:pk>/', SkillUpdateDelete.as_view()),
+    path('professional_work_experience/', professional_workexperience_save),
+    path('professional_work_experience/<str:pk>/', WorkExperienceUpdateDelete.as_view()),
+    path('professional_portfolio/', professional_portfolio_save),
+    path('professional_portfolio/<str:pk>/', PortfolioUpdateDelete.as_view()),
+    path('professional_membership/', professional_membership_save),
+    path('professional_membership/<str:pk>/', MembershipUpdateDelete.as_view()),
+    path('professional_certification/', professional_certification_save),
+    path('professional_certification/<str:pk>/', CertificationUpdateDelete.as_view()),
+    path('professional_reference/', professional_reference_save),
+    path('professional_reference/<str:pk>/', ReferenceUpdateDelete.as_view()),
+    path('religion/', ReligionList.as_view()),
+    path('nationality/', NationalityList.as_view()),
+    path('organization/', OrganizationList.as_view()),
+    path('major/', InstituteList.as_view()),
+    path('institute/', InstituteList.as_view()),
+    path('certificate_name/', CertificateNameList.as_view()),
 ]
\ No newline at end of file
diff --git a/question/admin.py b/question/admin.py
index 7698515..046392a 100644
--- a/question/admin.py
+++ b/question/admin.py
@@ -92,6 +92,33 @@ class QuestionAdmin(admin.ModelAdmin):
     inlines = [AnswerInline]
     save_as = True
 
+    def get_form(self, request, obj=None, **kwargs):
+        form = super(QuestionAdmin, self).get_form(request, obj, **kwargs)
+        form.base_fields['subject'].widget.can_add_related = False
+        form.base_fields['subject'].widget.can_change_related = False
+        form.base_fields['subject'].widget.can_delete_related = False
+
+        form.base_fields['qtype'].widget.can_add_related = False
+        form.base_fields['qtype'].widget.can_change_related = False
+        form.base_fields['qtype'].widget.can_delete_related = False
+
+        form.base_fields['topic'].widget.can_add_related = False
+        form.base_fields['topic'].widget.can_change_related = False
+        form.base_fields['topic'].widget.can_delete_related = False
+
+        form.base_fields['sub_topic'].widget.can_add_related = False
+        form.base_fields['sub_topic'].widget.can_change_related = False
+        form.base_fields['sub_topic'].widget.can_delete_related = False
+
+        form.base_fields['difficulties'].widget.can_add_related = False
+        form.base_fields['difficulties'].widget.can_change_related = False
+        form.base_fields['difficulties'].widget.can_delete_related = False
+
+
+
+
+        return form
+
     def get_urls(self):
         urls = super().get_urls()
         my_urls = [
diff --git a/questionnaire/templates/admin/questionnaire_create.html b/questionnaire/templates/admin/questionnaire_create.html
index e679c1b..cdfb45d 100644
--- a/questionnaire/templates/admin/questionnaire_create.html
+++ b/questionnaire/templates/admin/questionnaire_create.html
@@ -246,7 +246,7 @@
                 question_contains = $('#question_contains').val();
 
                 qtype_contains = $('#qtype_contains').val();
-                )
+                
                 difficulty_contains = $('#difficulty_contains').val();
                 subject_contains = $('#subject_contains').val();
                 topic_contains = $('#topic_contains').val();
diff --git a/requirements/req-dev.txt b/requirements/req-dev.txt
index 262e86c..014d987 100644
--- a/requirements/req-dev.txt
+++ b/requirements/req-dev.txt
@@ -25,3 +25,5 @@ sqlparse==0.3.0
 ua-parser==0.10.0
 user-agents==2.1
 xlrd==1.2.0
+requests==2.23.0
+beautifulsoup4==4.9.0
\ No newline at end of file
diff --git a/requirements/req-prod.txt b/requirements/req-prod.txt
index 37dcb7f..014d987 100644
--- a/requirements/req-prod.txt
+++ b/requirements/req-prod.txt
@@ -1,22 +1,29 @@
 asgiref==3.2.3
 Django==3.0.3
 django-admin-list-filter-dropdown==1.0.3
+django-admin-rangefilter==0.5.4
 django-ckeditor==5.7.1
 django-filter==2.2.0
 django-js-asset==1.2.2
+django-map-widgets==0.3.0
 django-mathfilters==0.4.0
 django-rest-passwordreset==1.1.0
+django-user-agents==0.4.0
 djangorestframework==3.11.0
 djangorestframework-simplejwt==4.4.0
 Markdown==3.1.1
-numpy==1.18.1
+mysqlclient==1.4.6
+numpy==1.18.2
 pandas==1.0.1
 Pillow==7.0.0
 PyJWT==1.7.1
 python-dateutil==2.8.1
 pytz==2019.3
+PyYAML==5.3.1
 six==1.14.0
 sqlparse==0.3.0
+ua-parser==0.10.0
+user-agents==2.1
 xlrd==1.2.0
-mysqlclient==1.4.6
-django-map-widgets
\ No newline at end of file
+requests==2.23.0
+beautifulsoup4==4.9.0
\ No newline at end of file
diff --git a/resources/strings_job.py b/resources/strings_job.py
index c70b63d..96f4c44 100644
--- a/resources/strings_job.py
+++ b/resources/strings_job.py
@@ -67,4 +67,9 @@ JOB_SKILL_DETAIL_VERBOSE_NAME_PLURAL = 'Job Skills'
 #Bookmark Job Strings #
 BOOKMARK_JOB_VERBOSE_NAME = 'Bookmark Job'
 BOOKMARK_JOB_VERBOSE_NAME_PLURAL = 'Bookmark Jobs'
-#Bookmark Job Strings #
\ No newline at end of file
+#Bookmark Job Strings #
+
+#Apply Online Strings #
+APPLY_ONLINE_JOB_VERBOSE_NAME = 'Apply Online Job'
+APPLY_ONLINE_JOB_VERBOSE_NAME_PLURAL = 'Apply Online Jobs'
+#Apply Online Strings #
\ No newline at end of file
diff --git a/shell/install_prod.sh b/shell/install_prod.sh
index 03db7aa..c2c3435 100755
--- a/shell/install_prod.sh
+++ b/shell/install_prod.sh
@@ -17,6 +17,6 @@ pip3 install virtualenv
 cd /var/
 sudo mkdir p7_static
 sudo chown ubuntu p7_static
-git checkout dev
+git checkout master
 cd p7
 virtualenv -p python3 venv
diff --git a/shell/start-local.sh b/shell/start-local.sh
index 13428d5..a90fabe 100755
--- a/shell/start-local.sh
+++ b/shell/start-local.sh
@@ -1,8 +1,9 @@
 #!/usr/bin/env bash
 source venv/bin/activate
 pip install -r requirements/req-dev.txt
+#python manage.py makemigrations --merge
 python manage.py migrate
-python manage.py makemigrations
+#python manage.py makemigrations
 python manage.py migrate
 export DJANGO_SETTINGS_MODULE="p7.settings_dev"
 python manage.py runserver 0:8000
diff --git a/static/css/common.css b/static/css/common.css
index 791b684..af60326 100644
--- a/static/css/common.css
+++ b/static/css/common.css
@@ -130,6 +130,13 @@ a.save.favourite.active {
     color: #ff8fa6;
     border-color: #ff8fa6;
 }
+
+a.save.apply.active {
+    color: white;
+    border-color: red;
+    background-color: blue;
+}
+
 .information-and-share .job-location {
     padding: 15px;
 }
diff --git a/static/css/main.css b/static/css/main.css
index ff50e93..f9b82d6 100644
--- a/static/css/main.css
+++ b/static/css/main.css
@@ -2785,7 +2785,7 @@ a:focus {
 .job-title-and-info .buttons .apply {
   padding: 15px 30px;
   border-radius: 3px;
-  background: #246df8;
+  background: blue;
   color: #ffffff;
   font-size: 1.4rem;
   border: 1px solid rgba(36, 109, 248, 0.15);
@@ -2818,6 +2818,7 @@ a:focus {
   margin-right: 10px;
 }
 
+
 .job-title-and-info .buttons .save svg {
   height: 18px;
   margin-right: 7px;
diff --git a/static/images/default-images/default-exam-image.png b/static/images/default-images/default-exam-image.png
new file mode 100644
index 0000000..e537c4a
Binary files /dev/null and b/static/images/default-images/default-exam-image.png differ
diff --git a/static/images/img_clock.png b/static/images/img_clock.png
new file mode 100644
index 0000000..bdfed4a
Binary files /dev/null and b/static/images/img_clock.png differ
diff --git a/static/images/testimonial/img_clock.png b/static/images/testimonial/img_clock.png
new file mode 100644
index 0000000..3a9c7d3
Binary files /dev/null and b/static/images/testimonial/img_clock.png differ
diff --git a/static/js/common.js b/static/js/common.js
index 63a6bd8..59b7c44 100644
--- a/static/js/common.js
+++ b/static/js/common.js
@@ -140,11 +140,17 @@ function json2Form(data, id){
 }
 
 function json2Div(data, container){
+    console.log(data)
     for(key in data) {
         // var el = $("#" + id).find("[name='"+ key +"']");
         var el = $(container).find("[id='" + key + "']");
-        console.log(el)
-        el.html(data[key]);
+        if(data[key]){
+            el.html(data[key]);
+        }
+        else{
+            el.parent().hide();
+        }
+
     }
 }
 
@@ -197,14 +203,15 @@ function makeListHtml(data, template){
                 if($(item).hasClass("dynamic-link")){
                     var href = $(item).attr("href") + data[i][k];
                     $(item).attr("href", href);
-                } else {
+                }
+                else {
                     $(item).html(data[i][k]);
                 }
             });
 
         }
         wrapper.append(templateEl)
-        feather.replace();
+
     }
     return wrapper.html();
 }
@@ -323,54 +330,100 @@ function TokenAuthenticate() {
 
 
 function goSignIn() {
-      window.location.href = "/professional/sign-in/";
+    window.location.href = "/professional/sign-in/";
 }
 
 function favouriteJobAddRemove(id, url) {
 
-        $("#"+id).on('click', '.favourite', function (event) {
-            event.preventDefault();
-            var user = $.cookie("user");
-            var job = $(this).attr('href');
-            if(isLoggedIn() && $(this).hasClass('active')){
-                var data = {'user_id':user, 'job_id':job};
-                favouriteUrl = url;
-                post(favouriteUrl, JSON.stringify(data), loadFavouriteJob);
-            }else if(isLoggedIn()){
-
-                var data = {'user_id':user, 'job_id':job};
-                favouriteUrl = url;
-                post(favouriteUrl, JSON.stringify(data), loadFavouriteJob)
-            }
-            else {
-                showQuestion("Sign In required!", "You are going to sign in now?", goSignIn , 'no')
+    $("#"+id).on('click', '.favourite:not(.apply)', function (event) {
+        event.preventDefault();
+        var user = $.cookie("user");
+        var job = $(this).attr('href');
+        if(isLoggedIn() && $(this).hasClass('active')){
+            var data = {'user_id':user, 'job_id':job};
+            favouriteUrl = url;
+            post(favouriteUrl, JSON.stringify(data), loadFavouriteJob);
+        }else if(isLoggedIn()){
+            var data = {'user_id':user, 'job_id':job};
+            favouriteUrl = url;
+            post(favouriteUrl, JSON.stringify(data), loadFavouriteJob)
+        }
+        else {
+            showQuestion("Sign In required!", "Are you going to sign in now?", goSignIn , 'no')
 
-            }
+        }
 
-        });
+    });
 
-    }
+}
 
 function isLoggedIn() {
-        var access_token = $.cookie("access");
-        if(access_token){
-            return true;
-        }
-        return false;
+    var access_token = $.cookie("access");
+    if(access_token){
+        return true;
     }
+    return false;
+}
 
 function loadFavouriteJob(data) {
-        if(data.responseJSON.code == 200){
-            console.log(data.responseJSON)
-            var el = $("#jobs").find("[href='"+ data.responseJSON.result.user.job +"']");
-            if(el.hasClass('active') && data.responseJSON.result.user.status == 'Removed'){
-                el.removeClass('active');
+    if(data.responseJSON.code == 200){
+        console.log(data.responseJSON)
+        var el = $("#jobs").find("[href='"+ data.responseJSON.result.user.job +"']");
+        el.each(function () {
+            if($(this).hasClass('active')){
+                $(this).removeClass('active');
                 showError('Oopss!', 'Job removed.')
             }
-            else if(el.hasClass("favourite")){
-                el.addClass('active');
+            else if($(this).hasClass("favourite")){
+                $(this).addClass('active');
                 showSuccess('Successful!', 'Job saved as a favourite.')
 
             }
+
+        })
+    }
+}
+
+
+// Favourite job common Api
+
+function applyOnlineJobAddRemove(id, url) {
+
+    $("#"+id).on('click', '.apply:not(.applied)', function (event) {
+        event.preventDefault();
+        var user = $.cookie("user");
+        var job = $(this).attr('href');
+        if(isLoggedIn() && $(this).hasClass('applied')){
+            var data = {'user_id':user, 'job_id':job};
+            applyonlineUrl = url;
+            post(applyonlineUrl, JSON.stringify(data), loadApplyonlineJob);
+        }else if(isLoggedIn()){
+
+            var data = {'user_id':user, 'job_id':job};
+            applyonlineUrl = url;
+            post(applyonlineUrl, JSON.stringify(data), loadApplyonlineJob)
+        }
+        else {
+            showQuestion("Sign In required!", "Are you going to sign in now?", goSignIn , 'no')
         }
-    }
\ No newline at end of file
+
+    });
+
+}
+
+
+
+function loadApplyonlineJob(data) {
+    if(data.responseJSON.code == 200){
+        console.log(data.responseJSON.result.user.job)
+        var el = $("#jobs").find("[href='"+ data.responseJSON.result.user.job +"']");
+        el.each(function () {
+            if($(this).hasClass("apply")){
+                $(this).addClass('applied');
+                showSuccess('Successful!', 'Job applied successfully.')
+                $(this).text('Applied');
+                $(this).attr('href', 'javascript:void(0)');
+            }
+        })
+    }
+}
\ No newline at end of file
diff --git a/static/js/exam.js b/static/js/exam.js
index 8512322..9e191a4 100644
--- a/static/js/exam.js
+++ b/static/js/exam.js
@@ -11,6 +11,27 @@ $(function () {
         });
     });
 
+    // image preview code start here
+    function readURL(input) {
+        if (input.files && input.files[0]) {
+            var reader = new FileReader();
+
+            reader.onload = function (e) {
+                $('.preview-show').attr('src', e.target.result);
+            }
+
+            reader.readAsDataURL(input.files[0]);
+        }
+    }
+
+    $(".img-preview").change(function () {
+        readURL(this);
+    });
+
+    $('.preview-show').on('click', function () {
+        $('.img-preview').click();
+    });
+    // image preview code start here
 
     function showQuestionnaire() {
         $("#template-list").addClass('d-none');
diff --git a/templates/home.html b/templates/home.html
index 4127a02..f212169 100644
--- a/templates/home.html
+++ b/templates/home.html
@@ -12,7 +12,7 @@
                         <p> Find Jobs, Employment & Career Opportunities</p>
 
                         <div class="banner-search">
-                            <form action="/api/trending_keyword_save/" id="search-form" class="search-form ajax" method="POST" data-callback = "redirectPage" novalidate="novalidate">
+                            <form action="/api/trending_keyword_save/" id="search-form" class="search-form ajax" method="POST" data-callback = "redirectPage" novalidate="novalidate" autocomplete="off">
                                 <input type="text" name="keyword" id="keyword" placeholder="Enter Keywords">
                                 <input type="text" name="location" id="location" placeholder="Location">
                                 <button class="button primary-bg"><i class="fas fa-search" style="color:#ffffff;"></i>Search Job</button>
@@ -257,6 +257,7 @@
         get(popularJobsUrl,loadPopularJobs);
         get(jobAlertUrl, loadJobAlert);
         favouriteJobAddRemove('job-list', '/api/favourite_job_add/');
+        applyOnlineJobAddRemove('job-list', '/api/apply_online_job_add/');
         // jobAlertRedirectPage();
     });
 
@@ -332,12 +333,12 @@
                 '<div class="info">'+
                 '<span class="company"><a href="#"><i class="fas fa-building" style="margin-right: 5px"></i>'+data[index].company_name+'</a></span>'+
                 '<span class="office-location"><a href="#"><i data-feather="map-pin"></i>'+data[index].job_location+'</a></span>'+
-                '<span class="job-type full-time"><a href="#"><i data-feather="clock"></i>'+data[index].employment_status+'</a></span>'+
+                '<span class="job-type full-time"><a href="#"><img style="margin-right: 6px; vertical-align: top; padding-top: 5px;" src="/static/images/img_clock.png" width="12">'+data[index].employment_status+'</a></span>'+
                 '</div>'+
                 '</div>'+
                 '<div class="more">'+
                 '<div class="buttons">'+
-                '<a href="javascript:void(0);" class="button" data-toggle="modal">Apply Now</a>'+
+                '<a href="'+data[index].job_id+'" class="button apply" data-toggle="modal">Apply Now</a>'+
                 '<a href="'+data[index].job_id+'" class="favourite"><i data-feather="heart"></i></a>'+
                 '</div>'+
                 '<p class="deadline">'+'Deadline: '+dateMomentString+'</p>'+
@@ -346,9 +347,28 @@
                 '</div>';
             $('#job-list').append(job_html);
             var el = $("#job-list").find("[href='"+ data[index].job_id +"']");
-            if(data[index].status == 'Yes' && isLoggedIn()){
-                el.addClass('active');
-            }
+            el.each(function () {
+                if($(this).hasClass('apply')){
+
+                    // $(this).removeClass('active');
+                    // showError('Oopss!', 'Job removed.')
+                    if(data[index].is_applied == 'Yes' && isLoggedIn()){
+
+                        $(this).addClass('applied');
+                        $(this).text('Applied');
+                        $(this).attr('href', 'javascript:void(0)')
+                    }
+                }
+                if($(this).hasClass("favourite")){
+                    if(data[index].status == 'Yes' && isLoggedIn()){
+                        $(this).addClass('active');
+                    }
+                    // $(this).addClass('active');
+                    // showSuccess('Successful!', 'Job saved as a favourite.')
+
+                }
+
+            });
             feather.replace();
         }
     }
diff --git a/templates/home_layout.html b/templates/home_layout.html
index 9b3723f..6423c9d 100644
--- a/templates/home_layout.html
+++ b/templates/home_layout.html
@@ -167,7 +167,7 @@
                 <p class="display-none" id="alert-msg">Get e-mail updates about our latest news and Special offers.</p>
                 <form action="/api/professional/job_alert/" id="job-alert" class="newsletter-form display-none form-inline ajax" method="POST" data-callback="jobAlertRedirectPage">
                   <div class="form-group">
-                    <input type="email" name="email" id="email" class="form-control" required data-msg-required="Email is required" data-msg-email="Please enter a valid email" placeholder="Email address...">
+                    <input type="text" name="email" id="email" regex='^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$' class="form-control" required data-msg-required="Email is required" data-msg-regex="Please enter a valid email" placeholder="Email address...">
                   </div>
                   <button class="btn button primary-bg">Submit<i class="fas fa-caret-right"></i></button>
                   <p class="newsletter-error">0 - Please enter a value</p>
@@ -223,8 +223,8 @@
     <script src="{% static '/assets/js/jquery.cookie.min.js' %}"></script>
     <script src="{% static 'js/custom.js'%}"></script>
     <script src="{% static '/assets/js/form2js.js' %}"></script>
-    <script src="{% static 'js/common.js' %}"></script>
     <script src="{% static 'js/jquery.validate.min.js' %}"></script>
+    <script src="{% static 'js/common.js' %}"></script>
     <script src="{% static '/assets/js/sweetalert2@9.js' %}"></script>
     <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBYT7cwP2Ki9fwJBmRH6t2FkjjkjsywVaE"></script>
     <script src="{% static 'js/map.js'%}"></script>
diff --git a/test_ui/config.py b/test_ui/config.py
index dbe6ebe..2e9524d 100644
--- a/test_ui/config.py
+++ b/test_ui/config.py
@@ -12,6 +12,10 @@ DIVISION_URL = '/location/division/'
 DISTRICT_URL = '/location/district/'
 QUALIFICATION_URL = '/job/qualification/'
 PROFESSIONAL_URL = '/pro/professional/'
+SKILL_URL = '/job/skill/'
+TRENDINGKEYWORD_URL = '/job/trendingkeywords/'
+TESTIMONIAL_URL = '/testimonial/testimonial/'
+CAREERADVICE_URL = '/career_advice/careeradvice/'
 
 QTYPE_URL= '/question/questiontype/'
 DIFFICULTY_URL= '/question/difficulty/'
diff --git a/test_ui/data/data_questionnaire.csv b/test_ui/data/data_questionnaire.csv
index bce5587..5ac979b 100644
--- a/test_ui/data/data_questionnaire.csv
+++ b/test_ui/data/data_questionnaire.csv
@@ -1,4 +1,4 @@
-test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_questionnaire_name,_remarks,_subject_id,_topic,_sub_topic,_question,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_questionnaire_name,_remarks,_subject,_topic,_sub_topic,_question,actual_result,status,notes,attachments,test_executed_by,test_execution_date
 questionnaire_add_1,,All Valid Data,,,1,Questionnaire A,Remark One,Subject A,Topic A,Sub Topic A,"Question 1,Question 2,Question 3,Question 4,Question 5,Question 6",,,,,,
 questionnaire_add_2,,All Valid Data,,,1,Questionnaire B,Remark Two,Subject B,Topic B,Sub Topic B,"Question 1,Question 2,Question 3,Question 4,Question 5,Question 6",,,,,,
 questionnaire_add_3,,All Valid Data,,,1,Questionnaire C,Remark Three,Subject C,Topic C,Sub Topic C,"Question 1,Question 2,Question 3,Question 4,Question 5,Question 6",,,,,,
diff --git a/test_ui/data/data_skill.csv b/test_ui/data/data_skill.csv
new file mode 100644
index 0000000..924fee1
--- /dev/null
+++ b/test_ui/data/data_skill.csv
@@ -0,0 +1,4 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_name,_date,_time,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+skill_add_1,,Valid Data,,,1,Skill A,21-03-2020,11:59:11,,,,,,
+skill_add_2,,Valid Data,,,1,Skill B,21-03-2020,11:59:11,,,,,,
+skill_add_3,,Valid Data,,,1,Skill C,21-03-2020,11:59:11,,,,,,
\ No newline at end of file
diff --git a/test_ui/data/data_trendingkeyword.csv b/test_ui/data/data_trendingkeyword.csv
new file mode 100644
index 0000000..eacf772
--- /dev/null
+++ b/test_ui/data/data_trendingkeyword.csv
@@ -0,0 +1,4 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_keyword,_location,_date,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+trendingkeyword_add_1,,Valid Data,,,1,Keyword A,Location A,21-03-2020,,,,,,
+trendingkeyword_add_2,,Valid Data,,,1,Keyword B,Location B,21-03-2020,,,,,,
+trendingkeyword_add_3,,Valid Data,,,1,Keyword C,Location C,21-03-2020,,,,,,
\ No newline at end of file
diff --git a/test_ui/test_careeradvice.py b/test_ui/test_careeradvice.py
new file mode 100644
index 0000000..21384af
--- /dev/null
+++ b/test_ui/test_careeradvice.py
@@ -0,0 +1,44 @@
+import os
+import time
+from selenium.common.exceptions import NoSuchElementException
+import pandas as pd
+from selenium import webdriver
+from .config import *
+
+
+def addCareeradvice(driver: webdriver.Chrome, data):
+    addCareeradvice = driver.find_element_by_class_name('addlink')
+    addCareeradvice.click()
+    time.sleep(1)
+    try:
+        title = driver.find_element_by_name('title')
+        title.clear()
+        if not pd.isna(data['_title']):
+            title.send_keys(data['_title'])
+            time.sleep(1)
+
+        short_description = driver.find_element_by_name('short_description')
+        short_description.clear()
+        if not pd.isna(data['_short_description']):
+            short_description.send_keys(data['_short_description'])
+            time.sleep(1)
+
+        description = driver.find_element_by_name('description')
+        description.clear()
+        if not pd.isna(data['_description']):
+            description.send_keys(data['_description'])
+            time.sleep(1)
+
+        author = driver.find_element_by_name('author')
+        author.clear()
+        if not pd.isna(data['_author']):
+            author.send_keys(data['_author'])
+            time.sleep(1)
+
+        qtype_save = driver.find_element_by_name('_save')
+        qtype_save.submit()
+        time.sleep(1)
+        driver.find_element_by_class_name('success')
+        return 1
+    except NoSuchElementException:
+        return 0
diff --git a/test_ui/test_job_post.py b/test_ui/test_job_post.py
index e90cdfc..43ad732 100644
--- a/test_ui/test_job_post.py
+++ b/test_ui/test_job_post.py
@@ -161,6 +161,194 @@ def addJobHome(driver: WebDriver, data):
 
 
 
+        if not pd.isna(data['_division']):
+            division = driver.find_element_by_id('division')
+            division.send_keys(data['_division'])
+        time.sleep(1)
+        if not pd.isna(data['_district']):
+            district = driver.find_element_by_id('district')
+            district.send_keys(data['_district'])
+        time.sleep(1)
+        if not pd.isna(data['_job_title']):
+            zipcode = driver.find_element_by_id('zipcode')
+            zipcode.send_keys('1100')
+        time.sleep(1)
+        if not pd.isna(data['_company_location']):
+            company_location = driver.find_element_by_id('company_location')
+            company_location.send_keys(data['_company_location'])
+        if not pd.isna(data['_company_name']):
+            company = driver.find_element_by_id('company')
+            company.send_keys(data['_company_name'])
+            # company.send_keys('2RA Technology Limited')
+        if not pd.isna(data['_web_address']):
+            web_address = driver.find_element_by_id('web_address')
+            web_address.send_keys(data['_web_address'])
+        time.sleep(1)
+        if not pd.isna(data['_company_profile']):
+            company_profile = driver.find_element_by_id('company_profile')
+            company_profile.send_keys(data['_company_profile'])
+        time.sleep(1)
+        if not pd.isna(data['_job_title']):
+            dot = driver.find_element_by_class_name('dot')
+            dot.click()
+        time.sleep(1)
+        save_button = driver.find_element_by_xpath('//*[@id="job-post-form"]/div/div[10]/div/button')
+        save_button.click()
+        time.sleep(2)
+        driver.find_element_by_css_selector('div[class="alert alert-success-customized"')
+        return 1
+    except Exception as ex:
+        return 0
+
+def addJobDetailHome(driver: WebDriver, data):
+
+    try:
+        job_post = driver.find_element_by_link_text('Post a Job')
+        job_post.click()
+
+        if not pd.isna(data['_job_title']):
+            job_title = driver.find_element_by_id('title')
+            job_title.send_keys(data['_job_title'])
+        time.sleep(1)
+        if not pd.isna(data['_job_title']):
+            company_name = driver.find_element_by_id('industry')
+            company_name.send_keys('IT & Telecommunication')
+            time.sleep(1)
+        if not pd.isna(data['_job_location']):
+            job_location = driver.find_element_by_id('job_location')
+            job_location.send_keys(data['_job_location'])
+        time.sleep(1)
+        if not pd.isna(data['_employment_status']):
+            employment_status = driver.find_element_by_id('employment_status')
+            employment_status.send_keys('Full Time')
+        time.sleep(1)
+        if not pd.isna(data['_experience']):
+            experience = driver.find_element_by_id('experience')
+            experience.send_keys('1 Year')
+        time.sleep(1)
+
+        if not pd.isna(data['_salary']):
+            salary = driver.find_element_by_id('salary')
+            if data['_salary'] != "Negotiable":
+                salary.send_keys(data['_salary'])
+            elif data['_salary'] != "Salary Range":
+                salary.send_keys(data['_salary'])
+
+                if not pd.isna(data['_currency']):
+                    currency = driver.find_element_by_id('currency')
+                    currency.send_keys(data['_currency'])
+                time.sleep(1)
+
+                if not pd.isna(data['_salary_min']):
+                    salary_min = driver.find_element_by_id('salary_min')
+                    if data['_salary_min'] >= "5000":
+                        salary_min.send_keys(data['_salary_min'])
+                    else:
+                        salary_min.send_keys('5000')
+                time.sleep(1)
+                if not pd.isna(data['_salary_max']):
+                    salary_max = driver.find_element_by_id('salary_max')
+                    if data['_salary_max'] <= "500000":
+                        salary_max.send_keys(data['_salary_max'])
+                    else:
+                        salary_max.send_keys('500000')
+
+        time.sleep(1)
+        if not pd.isna(data['_job_title']):
+            gender = driver.find_element_by_id('gender')
+            gender.send_keys('Male')
+        time.sleep(1)
+        if not pd.isna(data['_qualification']):
+            qualification = driver.find_element_by_id('qualification')
+            qualification.send_keys('Graduate / Fazil')
+        time.sleep(1)
+        if not pd.isna(data['_deadline']):
+            deadline = driver.find_element_by_id('application_deadline')
+            deadline.send_keys('04/13/2020')
+        time.sleep(1)
+
+        if not pd.isna(data['_vacancy']):
+            deadline = driver.find_element_by_id('application_deadline')
+            deadline.send_keys('04/13/2020')
+        time.sleep(1)
+
+        if not pd.isna(data['_job_descriptions']):
+            bullet = driver.find_element_by_xpath('//*[@id="mceu_3"]/button[1]/i')
+            bullet.click()
+            driver.switch_to.frame(driver.find_element_by_id("descriptions_ifr"))
+            job_requirment = driver.find_element_by_class_name('mce-content-body')
+            requirment = data['_job_descriptions']
+            requirment = requirment.replace('\\r', '').replace('\\', '')
+            requirment = ast.literal_eval(requirment)
+            count = 1
+            size = len(requirment)
+            for i in requirment:
+            # for i in range(len(requirment)):
+                job_requirment.send_keys(i)
+                if count < size:
+                    job_requirment.send_keys('\n')
+                count = count+1
+            driver.switch_to.default_content()
+        time.sleep(1)
+
+        if not pd.isna(data['_job_responsibilities']):
+            bullet = driver.find_element_by_xpath('//*[@id="mceu_23"]/button[1]/i')
+            bullet.click()
+            driver.switch_to.frame(driver.find_element_by_id("responsibilities_ifr"))
+            job_responsibilities = driver.find_element_by_class_name('mce-content-body')
+            requirment = data['_job_responsibilities']
+            requirment = requirment.replace('\\r', '').replace('\\', '')
+            requirment = ast.literal_eval(requirment)
+            count = 1
+            size = len(requirment)
+            for i in requirment:
+            # for i in range(len(requirment)):
+                job_responsibilities.send_keys(i)
+                if count < size:
+                    job_responsibilities.send_keys('\n')
+                count = count+1
+            driver.switch_to.default_content()
+        time.sleep(1)
+
+        if not pd.isna(data['_education']):
+            bullet = driver.find_element_by_xpath('//*[@id="mceu_35"]/button[1]/i')
+            bullet.click()
+            driver.switch_to.frame(driver.find_element_by_id("education_ifr"))
+            educational_requirment = driver.find_element_by_class_name('mce-content-body')
+            requirment = data['_education']
+            requirment = requirment.replace('\\r', '').replace('\\', '')
+            requirment = ast.literal_eval(requirment)
+            count = 1
+            size = len(requirment)
+            for i in requirment:
+            # for i in range(len(requirment)):
+                educational_requirment.send_keys(i)
+                if count < size:
+                    educational_requirment.send_keys('\n')
+                count = count+1
+            driver.switch_to.default_content()
+        time.sleep(1)
+
+
+        if not pd.isna(data['_other_benefits']):
+            bullet = driver.find_element_by_xpath('//*[@id="mceu_47"]/button[1]/i')
+            bullet.click()
+            driver.switch_to.frame(driver.find_element_by_id("other_benefits_ifr"))
+            other_benefit = driver.find_element_by_class_name('mce-content-body')
+            requirment = data['_other_benefits']
+            requirment = requirment.replace('\\r', '').replace('\\', '')
+            requirment = ast.literal_eval(requirment)
+            count = 1
+            size = len(requirment)
+            for i in requirment:
+            # for i in range(len(requirment)):
+                other_benefit.send_keys(i)
+                if count < size:
+                    other_benefit.send_keys('\n')
+                count = count+1
+            driver.switch_to.default_content()
+        time.sleep(1)
+
         if not pd.isna(data['_division']):
             division = driver.find_element_by_id('division')
             division.send_keys(data['_division'])
@@ -202,7 +390,7 @@ def addJobHome(driver: WebDriver, data):
 
 
 def addJobAdmin(driver: WebDriver, data):
-    driver.find_element_by_link_text('addlink').click()
+    driver.get('http://127.0.0.1/admin/job/job/add/')
     try:
         if not pd.isna(data['_job_title']):
             job_title = driver.find_element_by_name('title')
@@ -373,7 +561,7 @@ def addJobAdmin(driver: WebDriver, data):
 
         save_btn = driver.find_element_by_name('_save')
         save_btn.click()
-        time.sleep(1)
+        time.sleep(10)
         try:
             driver.find_element_by_class_name('success')
             return 1
diff --git a/test_ui/test_qtype.py b/test_ui/test_qtype.py
index d0e5d00..945f9ff 100644
--- a/test_ui/test_qtype.py
+++ b/test_ui/test_qtype.py
@@ -4,7 +4,6 @@ import pandas as pd
 from selenium import webdriver
 from .config import *
 
-
 def addQtype(driver: webdriver.Chrome, data):
     add_qtype = driver.find_element_by_class_name('addlink')
     add_qtype.click()
@@ -63,7 +62,7 @@ def updateQtype(driver: webdriver.Chrome, data):
         qtype_save = driver.find_element_by_name('_save')
         qtype_save.submit()
         time.sleep(1)
-        driver.find_element_by_class_name('addlink')
+        driver.find_element_by_class_name('success')
         return 1
     except NoSuchElementException:
         return 0
diff --git a/test_ui/test_questionnaire.py b/test_ui/test_questionnaire.py
index 4198657..4735d1d 100644
--- a/test_ui/test_questionnaire.py
+++ b/test_ui/test_questionnaire.py
@@ -12,77 +12,64 @@ def addQuestionnaire(driver: webdriver.Chrome, data):
     time.sleep(1)
     try:
 
-        questionnaire_name = driver.find_element_by_name('name')
+        questionnaire_name = driver.find_element_by_id('questionnaire_name')
         questionnaire_name.clear()
         if not pd.isna(data['_questionnaire_name']):
             questionnaire_name.send_keys(data['_questionnaire_name'])
             time.sleep(1)
 
-        remarks = driver.find_element_by_name('remarks')
-        remarks.clear()
-        if not pd.isna(data['_remarks']):
-            remarks.send_keys(data['_remarks'])
+        subject = driver.find_element_by_id('subject')
+        subject.click()
+        if not pd.isna(data['_subject']):
+            subject.send_keys(data['_subject'])
             # remarks.send_keys('\n')
             time.sleep(1)
 
-        subject_id = driver.find_element_by_name('subject')
-        subject_id.send_keys('------')
-        time.sleep(1)
-        if not pd.isna(data['_subject_id']):
-            subject_id.send_keys(data['_subject_id'])
-            # subject_id.send_keys('\n')
-            time.sleep(1)
-
-        topic_name = driver.find_element_by_name('topic')
-        topic_name.send_keys('------')
+        topic_name = driver.find_element_by_id('topic')
         time.sleep(1)
         if not pd.isna(data['_topic']):
             topic_name.send_keys(data['_topic'])
             # topic_name.send_keys('\n')
             time.sleep(1)
 
-        sub_topic_name = driver.find_element_by_name('sub_topic')
-        sub_topic_name.send_keys('------')
+        sub_topic_name = driver.find_element_by_id('sub_topic')
         time.sleep(1)
         if not pd.isna(data['_sub_topic']):
             sub_topic_name.send_keys(data['_sub_topic'])
             # sub_topic_name.send_keys('\n')
             time.sleep(1)
 
+        remarks = driver.find_element_by_id('remarks')
+        time.sleep(1)
+        if not pd.isna(data['_remarks']):
+            remarks.send_keys(data['_remarks'])
+            # subject_id.send_keys('\n')
+            time.sleep(1)
+
+        question_btn = driver.find_element_by_xpath('//*[@id="content"]/section[2]/div/button')
+        question_btn.click()
+        time.sleep(1)
         if not pd.isna(data['_question']):
             question = data['_question'].split(',')
             c = len(question)
             for row in range(len(question)):
                 try:
-                    if c-row <= 5:
-                        if c-row <= 1:
-                            # add_answer = driver.find_element_by_name('answers-__prefix__-name')
-                            add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
-                        else:
-                            add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
-
-                        add_question.send_keys('---------')
-                        time.sleep(1)
-                        add_question.send_keys('<p>'+question[row]+'</p>')
-                        time.sleep(1)
-
-                    else:
-                        add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
-                        add_question.send_keys('---------')
-                        time.sleep(1)
-                        add_question.send_keys('<p>'+question[row]+'</p>')
-                        time.sleep(1)
-                        driver.find_element_by_link_text("Add another Questionnaire Detail").click()
-                        time.sleep(1)
+                    add_question = driver.find_element_by_id('question_contains')
+                    add_question.clear()
+                    add_question.send_keys(question[row])
+                    time.sleep(1)
+                    driver.find_element_by_id('ques_search').click()
+                    time.sleep(1)
+                    driver.find_element_by_link_text('Select').click()
+                    time.sleep(1)
 
                 except Exception as ex:
-                    print("Print Row " + row)
+                    print("Print Row " + str(row))
 
-        questionnaire_save = driver.find_element_by_name('_save')
-        questionnaire_save.submit()
-        time.sleep(1)
-        # driver.find_element_by_class_name('addlink')
-        driver.find_element_by_class_name('messagelist')
+        questionnaire_save = driver.find_element_by_id('create_questionnaire')
+        questionnaire_save.click()
+        time.sleep(3)
+        driver.find_element_by_id('questionnaire_name')
         return 1
     except NoSuchElementException:
         return 0
diff --git a/test_ui/test_questionnaire_old.py b/test_ui/test_questionnaire_old.py
new file mode 100644
index 0000000..4198657
--- /dev/null
+++ b/test_ui/test_questionnaire_old.py
@@ -0,0 +1,88 @@
+import time
+from selenium.common.exceptions import NoSuchElementException
+import pandas as pd
+from selenium import webdriver
+from .config import *
+
+
+def addQuestionnaire(driver: webdriver.Chrome, data):
+
+    add_sub_topic = driver.find_element_by_class_name('addlink')
+    add_sub_topic.click()
+    time.sleep(1)
+    try:
+
+        questionnaire_name = driver.find_element_by_name('name')
+        questionnaire_name.clear()
+        if not pd.isna(data['_questionnaire_name']):
+            questionnaire_name.send_keys(data['_questionnaire_name'])
+            time.sleep(1)
+
+        remarks = driver.find_element_by_name('remarks')
+        remarks.clear()
+        if not pd.isna(data['_remarks']):
+            remarks.send_keys(data['_remarks'])
+            # remarks.send_keys('\n')
+            time.sleep(1)
+
+        subject_id = driver.find_element_by_name('subject')
+        subject_id.send_keys('------')
+        time.sleep(1)
+        if not pd.isna(data['_subject_id']):
+            subject_id.send_keys(data['_subject_id'])
+            # subject_id.send_keys('\n')
+            time.sleep(1)
+
+        topic_name = driver.find_element_by_name('topic')
+        topic_name.send_keys('------')
+        time.sleep(1)
+        if not pd.isna(data['_topic']):
+            topic_name.send_keys(data['_topic'])
+            # topic_name.send_keys('\n')
+            time.sleep(1)
+
+        sub_topic_name = driver.find_element_by_name('sub_topic')
+        sub_topic_name.send_keys('------')
+        time.sleep(1)
+        if not pd.isna(data['_sub_topic']):
+            sub_topic_name.send_keys(data['_sub_topic'])
+            # sub_topic_name.send_keys('\n')
+            time.sleep(1)
+
+        if not pd.isna(data['_question']):
+            question = data['_question'].split(',')
+            c = len(question)
+            for row in range(len(question)):
+                try:
+                    if c-row <= 5:
+                        if c-row <= 1:
+                            # add_answer = driver.find_element_by_name('answers-__prefix__-name')
+                            add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
+                        else:
+                            add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
+
+                        add_question.send_keys('---------')
+                        time.sleep(1)
+                        add_question.send_keys('<p>'+question[row]+'</p>')
+                        time.sleep(1)
+
+                    else:
+                        add_question = driver.find_element_by_name('questionnairedetail_set-' + str(row) + '-question_id')
+                        add_question.send_keys('---------')
+                        time.sleep(1)
+                        add_question.send_keys('<p>'+question[row]+'</p>')
+                        time.sleep(1)
+                        driver.find_element_by_link_text("Add another Questionnaire Detail").click()
+                        time.sleep(1)
+
+                except Exception as ex:
+                    print("Print Row " + row)
+
+        questionnaire_save = driver.find_element_by_name('_save')
+        questionnaire_save.submit()
+        time.sleep(1)
+        # driver.find_element_by_class_name('addlink')
+        driver.find_element_by_class_name('messagelist')
+        return 1
+    except NoSuchElementException:
+        return 0
diff --git a/test_ui/test_skill.py b/test_ui/test_skill.py
new file mode 100644
index 0000000..3c1525b
--- /dev/null
+++ b/test_ui/test_skill.py
@@ -0,0 +1,51 @@
+import time
+from selenium.common.exceptions import NoSuchElementException
+import pandas as pd
+from selenium.webdriver.chrome.webdriver import WebDriver
+from .config import *
+
+def addSkill(driver, data):
+    try:
+        driver.get(ADMIN_URL + SKILL_URL)
+        add_skill = driver.find_element_by_class_name('addlink')
+        add_skill.click()
+        if not pd.isna(data['_name']):
+            skill_name = driver.find_element_by_name('name')
+            skill_name.send_keys(data['_name'])
+
+        skill_date = driver.find_element_by_name('created_date_0')
+        skill_date.clear()
+        if not pd.isna(data['_date']):
+            skill_date.send_keys(data['_date'])
+            time.sleep(1)
+
+        skill_time = driver.find_element_by_name('created_date_1')
+        skill_time.clear()
+        if not pd.isna(data['_time']):
+            skill_time.send_keys(data['_time'])
+            time.sleep(1)
+
+        save_button = driver.find_element_by_name('_save')
+        save_button.click()
+        time.sleep(DELAY_SHORT)
+        # check that saved
+        driver.find_element_by_class_name('success')
+        return 1
+    except Exception as ex:
+        return 0
+
+# def deleteSkill(driver: WebDriver, data):
+#     driver.get(ADMIN_URL + DIVISION_URL)
+#     try:
+#         delete = driver.find_element_by_class_name('js-delete-division').click()
+#         deleteConfirm = driver.find_element_by_class_name('btn-danger').click()
+#         deleteDs = driver.find_element_by_class_name('js-delete-district').click()
+#         deleteDsConfirm = driver.find_element_by_class_name('btn-danger').click()
+#         deleteUp = driver.find_element_by_class_name('js-delete-upazilla').click()
+#         deleteUpConfirm = driver.find_element_by_class_name('btn-danger').click()
+#         deleteUn = driver.find_element_by_class_name('js-delete-union').click()
+#         deleteUnConfirm = driver.find_element_by_class_name('btn-danger').click()
+#
+#         return 1
+#     except Exception as ex:
+#         return 0
\ No newline at end of file
diff --git a/test_ui/test_testimonial.py b/test_ui/test_testimonial.py
new file mode 100644
index 0000000..f7a2ecf
--- /dev/null
+++ b/test_ui/test_testimonial.py
@@ -0,0 +1,38 @@
+import os
+import time
+from selenium.common.exceptions import NoSuchElementException
+import pandas as pd
+from selenium import webdriver
+from .config import *
+
+
+def addTestimonial(driver: webdriver.Chrome, data):
+    addTestimonial = driver.find_element_by_class_name('addlink')
+    addTestimonial.click()
+    time.sleep(1)
+    try:
+        client_name = driver.find_element_by_name('client_name')
+        client_name.clear()
+        if not pd.isna(data['_client_name']):
+            client_name.send_keys(data['_client_name'])
+            time.sleep(1)
+
+        comment = driver.find_element_by_name('comment')
+        comment.clear()
+        if not pd.isna(data['_comment']):
+            comment.send_keys(data['_comment'])
+            time.sleep(1)
+
+        profile_picture = driver.find_element_by_name('profile_picture')
+        profile_picture.clear()
+        if not pd.isna(data['_image_path']):
+            profile_picture.send_keys(data['_image_path'])
+            time.sleep(1)
+
+        qtype_save = driver.find_element_by_name('_save')
+        qtype_save.submit()
+        time.sleep(1)
+        driver.find_element_by_class_name('success')
+        return 1
+    except NoSuchElementException:
+        return 0
diff --git a/test_ui/test_trendingkeyword.py b/test_ui/test_trendingkeyword.py
new file mode 100644
index 0000000..9849fa6
--- /dev/null
+++ b/test_ui/test_trendingkeyword.py
@@ -0,0 +1,37 @@
+import time
+from selenium.common.exceptions import NoSuchElementException
+import pandas as pd
+from selenium import webdriver
+from .config import *
+
+
+def addTrendingkeyword(driver: webdriver.Chrome, data):
+    add_addTrendingkeyword = driver.find_element_by_class_name('addlink')
+    add_addTrendingkeyword.click()
+    time.sleep(1)
+    try:
+        keyword_name = driver.find_element_by_name('keyword')
+        keyword_name.clear()
+        if not pd.isna(data['_keyword']):
+            keyword_name.send_keys(data['_keyword'])
+            time.sleep(1)
+
+        location = driver.find_element_by_name('location')
+        location.clear()
+        if not pd.isna(data['_location']):
+            location.send_keys(data['_location'])
+            time.sleep(1)
+
+        keyword_date = driver.find_element_by_name('created_date')
+        keyword_date.clear()
+        if not pd.isna(data['_date']):
+            keyword_date.send_keys(data['_date'])
+            time.sleep(1)
+
+        qtype_save = driver.find_element_by_name('_save')
+        qtype_save.submit()
+        time.sleep(1)
+        driver.find_element_by_class_name('success')
+        return 1
+    except NoSuchElementException:
+        return 0
diff --git a/test_ui/testdata/careeradvice_add.csv b/test_ui/testdata/careeradvice_add.csv
new file mode 100644
index 0000000..d93c85f
--- /dev/null
+++ b/test_ui/testdata/careeradvice_add.csv
@@ -0,0 +1,11 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_title,_short_description,_description,_author,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+trendingkeyword_add_1,,All Valid Data,,,1,Career Advice Title Test,Short description will be displayed shortly in here,Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. ,Author Name Test,,,,,,
+ ,,Duplicate Entry,,,0,Career Advice Title Test,Short description will be displayed shortly in here,Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. Description will be larger then short discription to display the whole desire of talking. ,Author Name Test,,,,,,
+trendingkeyword_add_3,,All Field is empty,,,0,Career Advice Title One,,,,,,,,,
+trendingkeyword_add_4,,Valid Keyword But Empty Location & Date,,,0,Career Advice Title Two,,,Author Name One,,,,,,
+trendingkeyword_add_5,,Valid Keyword & Location But Empty Date,,,0,Career Advice Title Three,Short description abc,,Author Name Two,,,,,,
+trendingkeyword_add_6,,Valid Keyword & Date But Empty Location,,,0,Career Advice Title Four,,Description will be larger then short discription to display the whole desire of talking.,Author Name Three,,,,,,
+trendingkeyword_add_7,,Empty Keyword But Valid Location & Date,,,0,Career Advice Title Five,Short description def,Description will be larger then short discription to display ,Author Name  Four,,,,,,
+trendingkeyword_add_8,,Invalid Keyword But Valid Location & Date,,,0,~!!@^&f~!@,Short description ghi,Description will be larger then short discription to display the whole ,Author Name Five,,,,,,
+trendingkeyword_add_9,,Valid Keyword and Location But Past Date,,,0,Career Advice Title Six,Short description jkl,Description will be larger then ,Author Name Six,,,,,,
+trendingkeyword_add_10,,Valid Keyword and Location  But Future Date,,,0,Career Advice Title Seven,Short description mno,Description,Author Name Seven,,,,,,
\ No newline at end of file
diff --git a/test_ui/testdata/questionnaire_add.csv b/test_ui/testdata/questionnaire_add.csv
index 7d255d4..7559591 100644
--- a/test_ui/testdata/questionnaire_add.csv
+++ b/test_ui/testdata/questionnaire_add.csv
@@ -1,4 +1,4 @@
-test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_questionnaire_name,_remarks,_subject_id,_topic,_sub_topic,_question,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_questionnaire_name,_remarks,_subject,_topic,_sub_topic,_question,actual_result,status,notes,attachments,test_executed_by,test_execution_date
 questionnaire_add_1,,All Valid Data,,,1,Questionnaire Test,Remark One,Subject A,Topic A,Sub Topic A,"Question 1,Question 2,Question 3,Question 4,Question 5,Question 6",,,,,,
 questionnaire_add_2,,All Empty Field,,,0,,,,,,,,,,,,
 questionnaire_add_3,,Existing Questionnaire Name,,,0,Questionnaire Test,Remark Two,Subject A,Topic A,Sub Topic A,"Question 1,",,,,,,
diff --git a/test_ui/testdata/skill_add.csv b/test_ui/testdata/skill_add.csv
new file mode 100644
index 0000000..4e33174
--- /dev/null
+++ b/test_ui/testdata/skill_add.csv
@@ -0,0 +1,11 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_name,_date,_time,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+skill_add_1,,All Valid Data,,,1,Skill Test,21-03-2020,11:59:11,,,,,,
+skill_add_2,,Duplicate Entry,,,0,Skill Test,21-03-2020,11:59:11,,,,,,
+skill_add_3,,All Field is empty,,,0,,,,,,,,,
+skill_add_4,,Valid Skill But Empty Date & Time,,,0,Skill Test One,,,,,,,,
+skill_add_5,,Valid Skill & Date But Empty Time,,,0,Skill Test Two,21-03-2020,,,,,,,
+skill_add_6,,Valid Skill & Time But Empty Date,,,0,Skill Test Three,,11:59:11,,,,,,
+skill_add_7,,Empty Skill But Valid Date & Time,,,0,,21-03-2020,11:59:11,,,,,,
+skill_add_8,,Invalid Skill But Valid Date & Time,,,0,~!12Qtype@,21-03-2020,11:59:11,,,,,,
+skill_add_9,,Valid Skill and Time But Past Date,,,0,Skill Test Four,21-03-2020,11:59:11,,,,,,
+skill_add_10,,Valid Skill and Time But Future Date,,,0,Skill Test Five,21-03-2020,11:59:11,,,,,,
\ No newline at end of file
diff --git a/test_ui/testdata/testimonial_add.csv b/test_ui/testdata/testimonial_add.csv
new file mode 100644
index 0000000..8651df3
--- /dev/null
+++ b/test_ui/testdata/testimonial_add.csv
@@ -0,0 +1,9 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_client_name,_comment,_image_path,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+testimonial_add_1,,All Valid Data,,,1,Clent Name,Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Till the end Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Till the end,/home/tanvir/Pictures/thumb-4.jpg,,,,,,
+testimonial_add_2,,All Valid Data,,,1,Clent Name,Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Till the end Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Coment goes here. Till the end,/home/tanvir/Pictures/thumb-4.jpg,,,,,,
+testimonial_add_3,,All Field is empty,,,0,,,,,,,,,
+testimonial_add_4,,Valid Client Name But empty Comment and Image,,,0,Clent Name Two,,,,,,,,
+testimonial_add_5,,Valid Client Name and Comment but No Image,,,0,Clent Name Three,Comment goes here,,,,,,,
+testimonial_add_6,,Valid Client Name and Image But empty Comment,,,0,Clent Name Four,,/home/tanvir/Pictures/thumb-4.jpg,,,,,,
+testimonial_add_7,,Valid Client Name But empty Comment and Image,,,0,,Comment is in here,/home/tanvir/Pictures/thumb-4.jpg,,,,,,
+testimonial_add_8,,Gurbage(Special Char) in Client Name butvalid Comment and Image,,,0,~!!@^&f~!@,Comment should be large,/home/tanvir/Pictures/thumb-4.jpg,,,,,,
\ No newline at end of file
diff --git a/test_ui/testdata/trendingkeyword_add.csv b/test_ui/testdata/trendingkeyword_add.csv
new file mode 100644
index 0000000..1288b51
--- /dev/null
+++ b/test_ui/testdata/trendingkeyword_add.csv
@@ -0,0 +1,11 @@
+test_case_id,test_priority,test_description,test_designed_by,test_designed_date,expected_result,_keyword,_location,_date,actual_result,status,notes,attachments,test_executed_by,test_execution_date
+trendingkeyword_add_1,,All Valid Data,,,1,Keyword Test,Location Test,21-03-2020,,,,,,
+trendingkeyword_add_2,,Duplicate Entry,,,0,Keyword Test,Location Test,21-03-2020,,,,,,
+trendingkeyword_add_3,,All Field is empty,,,0,,,,,,,,,
+trendingkeyword_add_4,,Valid Keyword But Empty Location & Date,,,0,Keyword One,,,,,,,,
+trendingkeyword_add_5,,Valid Keyword & Location But Empty Date,,,0,Keyword Two,Location One,,,,,,,
+trendingkeyword_add_6,,Valid Keyword & Date But Empty Location,,,0,Keyword Three,,21-03-2020,,,,,,
+trendingkeyword_add_7,,Empty Keyword But Valid Location & Date,,,0,,Location Two,21-03-2021,,,,,,
+trendingkeyword_add_8,,Invalid Keyword But Valid Location & Date,,,0,~!!@^&f~!@,Location Three,21-03-2022,,,,,,
+trendingkeyword_add_9,,Valid Keyword and Location But Past Date,,,0,Keyword Four,Location Four,21-03-1020,,,,,,
+trendingkeyword_add_10,,Valid Keyword and Location  But Future Date,,,0,Keyword Five,Location Five,21-03-3020,,,,,,
\ No newline at end of file
diff --git a/test_ui/tests.py b/test_ui/tests.py
index e2c952e..9cbdfb9 100644
--- a/test_ui/tests.py
+++ b/test_ui/tests.py
@@ -4,6 +4,7 @@ import pandas as pd
 
 from selenium import webdriver
 
+from test_ui.test_careeradvice import addCareeradvice
 from test_ui.test_currency import *
 from test_ui.test_difficulty import *
 from test_ui.test_exam import *
@@ -18,9 +19,12 @@ from test_ui.test_qualification import *
 from test_ui.test_question import *
 from test_ui.test_questionnaire import *
 from test_ui.test_sign_up import *
+from test_ui.test_skill import *
 from test_ui.test_sub_topic import *
 from test_ui.test_subject import *
+from test_ui.test_testimonial import addTestimonial
 from test_ui.test_topic import *
+from test_ui.test_trendingkeyword import addTrendingkeyword
 from .test_district import *
 from .test_division import *
 from .test_job_post import *
@@ -33,9 +37,9 @@ from .config import *
 
 class TestUI(unittest.TestCase):
 
-    def setUpClass():
-        print("Data Entry started ..")
-        TestUI.dataEntry()
+    # def setUpClass():
+    #     print("Data Entry started ..")
+    #     TestUI.dataEntry()
 
 
     def setUp(self):
@@ -46,7 +50,7 @@ class TestUI(unittest.TestCase):
 
     def dataEntry():
         driver = webdriver.Chrome(CHROME_DRIVER_LOCATION)
-        adminLogin(driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+        adminLogin(driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
         IndEntry = pd.read_csv("test_ui/data/data_industry.csv", dtype=str)
         JTypEntry = pd.read_csv("test_ui/data/data_job_type.csv", dtype=str)
         ExpEntry = pd.read_csv("test_ui/data/data_experience.csv", dtype=str)
@@ -67,6 +71,8 @@ class TestUI(unittest.TestCase):
         ExamCatEntry = pd.read_csv("test_ui/data/data_exam_category.csv", dtype=str)
         ExamLevelEntry = pd.read_csv("test_ui/data/data_exam_level.csv", dtype=str)
         ExamEntry = pd.read_csv("test_ui/data/data_exam.csv", dtype=str)
+        SkillEntry = pd.read_csv("test_ui/data/data_skill.csv", dtype=str)
+        TrendingkeywordEntry = pd.read_csv("test_ui/data/data_trendingkeyword.csv", dtype=str)
 
 
         f = 1
@@ -117,27 +123,30 @@ class TestUI(unittest.TestCase):
         for idx, row in QnaireEntry.iterrows():
             driver.get(ADMIN_URL + QUESTIONNAIRE_URL)
             actual16 = addQuestionnaire(driver, row)
-
         for idx, row in ExamCatEntry.iterrows():
             driver.get(ADMIN_URL + EXAM_CATEGORY_URL)
             actual17 = addExamCategory(driver, row)
         for idx, row in ExamLevelEntry.iterrows():
             driver.get(ADMIN_URL + EXAM_LEVEL_URL)
             actual18= addExamLevel(driver, row)
-
+        for idx, row in SkillEntry.iterrows():
+             actual18 = addSkill(driver, row)
+        for idx, row in TrendingkeywordEntry.iterrows():
+            driver.get(ADMIN_URL + TRENDINGKEYWORD_URL)
+            actual18 = addTrendingkeyword(driver, row)
         # # for idx, row in ExamEntry.iterrows():
         # #     driver.get(ADMIN_URL + EXAM_URL)
         # #     actual19 = addExam(driver, row)
         #
         #
-            try:
-                if actual1==actual2==actual3==actual4==actual5==actual6==actual7==actual8==actual9==actual10==actual11==actual12==actual13==actual14==actual15==actual16==actual17==actual18:
-                    print("Data Entry succeeded")
-                else:
-                    print("Error In Data Entry")
-
-            except Exception as ex:
-                print("Error In Data Entry")
+            # try:
+            #     if actual1==actual2==actual3==actual4==actual5==actual6==actual7==actual8==actual9==actual10==actual11==actual12==actual13==actual14==actual15==actual16==actual17==actual18:
+            #         print("Data Entry succeeded")
+            #     else:
+            #         print("Error In Data Entry")
+            #
+            # except Exception as ex:
+            #     print("Error In Data Entry")
 
 
     def testSignUp(self):
@@ -187,6 +196,9 @@ class TestUI(unittest.TestCase):
             raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
         else:
             print("All passed")
+    # def setUpClass():
+    #     print("Data Entry started ..")
+    #     TestUI.dataEntry()
 
     def testLoginAdmin(self):
         data = pd.read_csv("test_ui/testdata/admin_login.csv", dtype=str)
@@ -215,7 +227,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testIndustry(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/industry_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -237,7 +249,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testJobType(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/job_type_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -259,7 +271,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testExperience(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/experience_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -280,7 +292,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testCurrency(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
         data = pd.read_csv("test_ui/testdata/currency_add.csv", dtype=str)
         for idx, row in data.iterrows():
             self.driver.get(ADMIN_URL+CURRENCY_URL)
@@ -300,7 +312,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testGender(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/gender_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -319,7 +331,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testQualification(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/qualification_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -341,7 +353,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testDivision(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
         data = pd.read_csv("test_ui/testdata/division_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -361,7 +373,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testDistrict(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
         data = pd.read_csv("test_ui/testdata/district_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -381,7 +393,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     # def testCompany(self):
-    #     adminLogin(self.driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+    #     adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
     #     data = pd.read_csv("test_ui/data/basis_company.csv", dtype=str)
     #     for idx, row in data.iterrows():
     #         self.driver.get(ADMIN_URL+COMPANY_URL)
@@ -392,9 +404,8 @@ class TestUI(unittest.TestCase):
     #
     #             print(ex)
 
-
     def testJobHome(self):
-        login(self.driver, {'_email': 'tanvir@ishraak.com', '_password': '12345678a', 'name': 'admin'})
+        login(self.driver, {'_email': 'tanvir@ishraak.com', '_password': '@dmin123#45678a', 'name': 'admin'})
         data = pd.read_csv("test_ui/testdata/job_post_add.csv", dtype=str)
         for idx, row in data.iterrows():
             self.driver.get(MAIN_URL)
@@ -406,7 +417,7 @@ class TestUI(unittest.TestCase):
                 print(ex)
 
     def testJobAdmin(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', 'name': 'admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
         data = pd.read_csv("test_ui/data/bdjobs_detail_list.csv", dtype=str)
         for idx, row in data.iterrows():
             self.driver.get(ADMIN_URL + ADMIN_JOB_POST_URL)
@@ -418,7 +429,7 @@ class TestUI(unittest.TestCase):
                 print(ex)
 
     def testProfessional(self):
-        adminLogin(self.driver, {'_email': 'tanvir@ishraak.com', '_password': '12345678a', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'tanvir@ishraak.com', '_password': '@dmin123#45678a', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/professional_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -437,7 +448,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testQtype(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/qtype_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -458,7 +469,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testDifficulty(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/difficulty_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -479,7 +490,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testSubject(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/subject_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -497,7 +508,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testTopic(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/topic_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -517,7 +528,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testSubTopic(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/sub_topic_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -540,7 +551,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testQuestion(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/question_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -557,26 +568,26 @@ class TestUI(unittest.TestCase):
         else:
             print("All passed")
 
-    # def testQuestionnaire(self):
-    #     adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
-    #     data = pd.read_csv("test_ui/testdata/questionnaire_add.csv", dtype=str)
-    #     f = 0
-    #     for idx, row in data.iterrows():
-    #         self.driver.get(ADMIN_URL + QUESTIONNAIRE_URL)
-    #         actual = addQuestionnaire(self.driver, row)
-    #         try:
-    #             self.assertEqual(row['expected_result'], str(actual))
-    #             print(row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
-    #         except Exception as ex:
-    #             print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row['test_description'])
-    #             f = f + 1
-    #     if f != 0:
-    #         raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
-    #     else:
-    #         print("All passed")
+    def testQuestionnaire(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
+        data = pd.read_csv("test_ui/testdata/questionnaire_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            self.driver.get(ADMIN_URL + QUESTIONNAIRE_URL)
+            actual = addQuestionnaire(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row['test_description'])
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
 
     def testExamCategory(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/exam_category_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -594,7 +605,7 @@ class TestUI(unittest.TestCase):
             print("All passed")
 
     def testExamLevel(self):
-        adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
         data = pd.read_csv("test_ui/testdata/exam_level_add.csv", dtype=str)
         f = 0
         for idx, row in data.iterrows():
@@ -611,8 +622,109 @@ class TestUI(unittest.TestCase):
         else:
             print("All passed")
 
+    def testSkill(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', 'name': 'admin'})
+        data = pd.read_csv("test_ui/testdata/skill_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            actual = addSkill(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(
+                    row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row[
+                    'test_description'])
+                print(ex)
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
+
+    def testTrendingkeyword(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
+        data = pd.read_csv("test_ui/testdata/trendingkeyword_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            self.driver.get(ADMIN_URL + TRENDINGKEYWORD_URL)
+            actual = addTrendingkeyword(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(
+                    row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row[
+                    'test_description'])
+                print(ex)
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
+
+    def testTestimonial(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
+        data = pd.read_csv("test_ui/testdata/testimonial_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            self.driver.get(ADMIN_URL + TESTIMONIAL_URL)
+            actual = addTestimonial(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(
+                    row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row[
+                    'test_description'])
+                print(ex)
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
+
+    def testCareeradvice(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
+        data = pd.read_csv("test_ui/testdata/careeradvice_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            self.driver.get(ADMIN_URL + CAREERADVICE_URL)
+            actual = addCareeradvice(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(
+                    row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row[
+                    'test_description'])
+                print(ex)
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
+
+    def testExam(self):
+        adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
+        data = pd.read_csv("test_ui/testdata/exam_add.csv", dtype=str)
+        f = 0
+        for idx, row in data.iterrows():
+            self.driver.get(ADMIN_URL + EXAM_URL)
+            actual = addExam(self.driver, row)
+            try:
+                self.assertEqual(row['expected_result'], str(actual))
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Pass : " + row['test_description'])
+            except Exception as ex:
+                print(row['test_case_id'] + " Expected " + row['expected_result'] + " Failed : " + row['test_description'])
+                f = f + 1
+        if f != 0:
+            raise Exception("Total pass: " + str(idx + 1 - f) + " and Failed: " + str(f))
+        else:
+            print("All passed")
+
     # def testExam(self):
-    #     adminLogin(self.driver, {'_email': 'admin', '_password': '123', '_name': 'Admin'})
+    #     adminLogin(self.driver, {'_email': 'admin', '_password': '@dmin123#', '_name': 'Admin'})
     #     data = pd.read_csv("test_ui/testdata/exam_add.csv", dtype=str)
     #     f = 0
     #     for idx, row in data.iterrows():
