diff --git a/job/admin.py b/job/admin.py
index dd04407..39d0d39 100644
--- a/job/admin.py
+++ b/job/admin.py
@@ -9,15 +9,17 @@ from django_admin_listfilter_dropdown.filters import DropdownFilter
 from rangefilter.filter import DateRangeFilter, DateTimeRangeFilter
 
 class JobAdmin(admin.ModelAdmin):
-    filter_horizontal = ('job_skills',)
-    list_display = ['title', 'industry', 'employment_status', 'job_location', 'experience', 'qualification', 'application_deadline',  'company_name', 'entry_date' ]
+    filter_horizontal = ('job_skills',) # Many to many field
+    list_display = ['title', 'company_name', 'job_location', 'created_date',  'entry_date', 'application_deadline' ]
     search_fields = ['title__icontains', 'industry__name__icontains', 'employment_status__name__icontains', 'job_location__icontains',
                      'experience__name__icontains', 'qualification__name__icontains', 'gender__name__icontains',
                      'company_name__name__icontains', 'division__name__icontains', 'district__name__icontains', 'zipcode__iexact','entry_date']
-    date_hierarchy = 'entry_date'
+    date_hierarchy = 'entry_date' # Top filter
     list_per_page = 15
-    list_filter = (('entry_date', DateTimeRangeFilter),)
-    readonly_fields = ["slug",]
+    list_filter = (('created_date', DateRangeFilter), ('entry_date', DateRangeFilter))
+    readonly_fields = ["slug", "applied_count", "favorite_count"]
+    exclude = ["terms_and_condition",]
+
 # class CompanyAdmin(admin.ModelAdmin):
 #     list_display = ['name', 'address', 'basis_membership_no', 'email', 'web_address', 'organization_head','year_of_eastablishment',
 #                     'division', 'district']
diff --git a/job/models.py b/job/models.py
index 11a28cc..472fba1 100644
--- a/job/models.py
+++ b/job/models.py
@@ -191,6 +191,7 @@ class Job(models.Model):
         verbose_name = strings_job.JOB_VERBOSE_NAME
         verbose_name_plural = strings_job.JOB_VERBOSE_NAME_PLURAL
         db_table = 'jobs'
+        ordering = ['-entry_date']
 
     def load_data(self, json_data):
         self.__dict__ = json_data
